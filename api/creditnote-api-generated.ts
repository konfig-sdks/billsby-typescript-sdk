/* tslint:disable */
/* eslint-disable */
/*
Billsby API

Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.

Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.    

Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.

If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build. 

Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..

The version of the OpenAPI document: 1.3.5


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreditnoteListResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CreditnoteApi - axios parameter creator
 * @export
 */
export const CreditnoteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get a list of all your company\'s credit notes
         * @summary Company credit notes
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {number} page The page of credit notes you would like to view
         * @param {number} pageSize The number of records to return per page (max 100)
         * @param {string} [query] Add search terms here to filter results
         * @param {string} [orderBy] Sort the results by particular properties
         * @param {string} [orderByDescending] Sort the results by particular properties in descending order
         * @param {boolean} [isPending] Do you want to show credit notes with the status \&#39;pending\&#39;; true or false
         * @param {boolean} [isPaid] Do you want to show credit notes with the status \&#39;paid\&#39;; true or false
         * @param {boolean} [isFailed] Do you want to show credit notes with the status \&#39;failed\&#39;; true or false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (companyDomain: string, page: number, pageSize: number, query?: string, orderBy?: string, orderByDescending?: string, isPending?: boolean, isPaid?: boolean, isFailed?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('list', 'companyDomain', companyDomain)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('list', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('list', 'pageSize', pageSize)
            const localVarPath = `/{companyDomain}/companies/creditnotes`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (orderByDescending !== undefined) {
                localVarQueryParameter['orderByDescending'] = orderByDescending;
            }

            if (isPending !== undefined) {
                localVarQueryParameter['isPending'] = isPending;
            }

            if (isPaid !== undefined) {
                localVarQueryParameter['isPaid'] = isPaid;
            }

            if (isFailed !== undefined) {
                localVarQueryParameter['isFailed'] = isFailed;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/companies/creditnotes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reattempt credit note payment
         * @param {string} creditNoteNumber The unique identifier of the credit note in the Billsby platform
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reattemptPayment: async (creditNoteNumber: string, companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'creditNoteNumber' is not null or undefined
            assertParamExists('reattemptPayment', 'creditNoteNumber', creditNoteNumber)
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('reattemptPayment', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain} /creditNotes /{creditNoteNumber} /Payment`
                .replace(`{${"creditNoteNumber"}}`, encodeURIComponent(String(creditNoteNumber !== undefined ? creditNoteNumber : `-creditNoteNumber-`)))
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain} /creditNotes /{creditNoteNumber} /Payment',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreditnoteApi - functional programming interface
 * @export
 */
export const CreditnoteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreditnoteApiAxiosParamCreator(configuration)
    return {
        /**
         * Get a list of all your company\'s credit notes
         * @summary Company credit notes
         * @param {CreditnoteApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: CreditnoteApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreditnoteListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.companyDomain, requestParameters.page, requestParameters.pageSize, requestParameters.query, requestParameters.orderBy, requestParameters.orderByDescending, requestParameters.isPending, requestParameters.isPaid, requestParameters.isFailed, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Reattempt credit note payment
         * @param {CreditnoteApiReattemptPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reattemptPayment(requestParameters: CreditnoteApiReattemptPaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reattemptPayment(requestParameters.creditNoteNumber, requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreditnoteApi - factory interface
 * @export
 */
export const CreditnoteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreditnoteApiFp(configuration)
    return {
        /**
         * Get a list of all your company\'s credit notes
         * @summary Company credit notes
         * @param {CreditnoteApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: CreditnoteApiListRequest, options?: AxiosRequestConfig): AxiosPromise<CreditnoteListResponse> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reattempt credit note payment
         * @param {CreditnoteApiReattemptPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reattemptPayment(requestParameters: CreditnoteApiReattemptPaymentRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.reattemptPayment(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for list operation in CreditnoteApi.
 * @export
 * @interface CreditnoteApiListRequest
 */
export type CreditnoteApiListRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CreditnoteApiList
    */
    readonly companyDomain: string
    
    /**
    * The page of credit notes you would like to view
    * @type {number}
    * @memberof CreditnoteApiList
    */
    readonly page: number
    
    /**
    * The number of records to return per page (max 100)
    * @type {number}
    * @memberof CreditnoteApiList
    */
    readonly pageSize: number
    
    /**
    * Add search terms here to filter results
    * @type {string}
    * @memberof CreditnoteApiList
    */
    readonly query?: string
    
    /**
    * Sort the results by particular properties
    * @type {string}
    * @memberof CreditnoteApiList
    */
    readonly orderBy?: string
    
    /**
    * Sort the results by particular properties in descending order
    * @type {string}
    * @memberof CreditnoteApiList
    */
    readonly orderByDescending?: string
    
    /**
    * Do you want to show credit notes with the status \'pending\'; true or false
    * @type {boolean}
    * @memberof CreditnoteApiList
    */
    readonly isPending?: boolean
    
    /**
    * Do you want to show credit notes with the status \'paid\'; true or false
    * @type {boolean}
    * @memberof CreditnoteApiList
    */
    readonly isPaid?: boolean
    
    /**
    * Do you want to show credit notes with the status \'failed\'; true or false
    * @type {boolean}
    * @memberof CreditnoteApiList
    */
    readonly isFailed?: boolean
    
}

/**
 * Request parameters for reattemptPayment operation in CreditnoteApi.
 * @export
 * @interface CreditnoteApiReattemptPaymentRequest
 */
export type CreditnoteApiReattemptPaymentRequest = {
    
    /**
    * The unique identifier of the credit note in the Billsby platform
    * @type {string}
    * @memberof CreditnoteApiReattemptPayment
    */
    readonly creditNoteNumber: string
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CreditnoteApiReattemptPayment
    */
    readonly companyDomain: string
    
}

/**
 * CreditnoteApiGenerated - object-oriented interface
 * @export
 * @class CreditnoteApiGenerated
 * @extends {BaseAPI}
 */
export class CreditnoteApiGenerated extends BaseAPI {
    /**
     * Get a list of all your company\'s credit notes
     * @summary Company credit notes
     * @param {CreditnoteApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditnoteApiGenerated
     */
    public list(requestParameters: CreditnoteApiListRequest, options?: AxiosRequestConfig) {
        return CreditnoteApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reattempt credit note payment
     * @param {CreditnoteApiReattemptPaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditnoteApiGenerated
     */
    public reattemptPayment(requestParameters: CreditnoteApiReattemptPaymentRequest, options?: AxiosRequestConfig) {
        return CreditnoteApiFp(this.configuration).reattemptPayment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
