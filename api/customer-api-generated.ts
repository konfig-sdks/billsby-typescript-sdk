/* tslint:disable */
/* eslint-disable */
/*
Billsby API

Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.

Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.    

Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.

If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build. 

Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..

The version of the OpenAPI document: 1.3.5


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomerAddSubscriptionToExistingCustomerRequest } from '../models';
// @ts-ignore
import { CustomerAddSubscriptionToExistingCustomerRequestAddOnsInner } from '../models';
// @ts-ignore
import { CustomerAddSubscriptionToExistingCustomerRequestAddress } from '../models';
// @ts-ignore
import { CustomerAddSubscriptionToExistingCustomerRequestCouponCodesInner } from '../models';
// @ts-ignore
import { CustomerAddSubscriptionToExistingCustomerRequestCustomFieldResponseInner } from '../models';
// @ts-ignore
import { CustomerAddSubscriptionToExistingCustomerResponse } from '../models';
// @ts-ignore
import { CustomerCreateNewCustomerAndSubscriptionRequest } from '../models';
// @ts-ignore
import { CustomerCreateNewCustomerAndSubscriptionRequestAddress } from '../models';
// @ts-ignore
import { CustomerCreateNewCustomerAndSubscriptionRequestCardDetails } from '../models';
// @ts-ignore
import { CustomerCreateNewCustomerAndSubscriptionRequestShippingAddress } from '../models';
// @ts-ignore
import { CustomerCreateNewCustomerAndSubscriptionResponse } from '../models';
// @ts-ignore
import { CustomerCreateWithoutSubscriptionRequest } from '../models';
// @ts-ignore
import { CustomerCreateWithoutSubscriptionRequestCardDetails } from '../models';
// @ts-ignore
import { CustomerCreateWithoutSubscriptionResponse } from '../models';
// @ts-ignore
import { CustomerGetCreditNotesResponseInner } from '../models';
// @ts-ignore
import { CustomerGetDetailsResponse } from '../models';
// @ts-ignore
import { CustomerGetSubscriptionsByUniqueIdResponseInner } from '../models';
// @ts-ignore
import { CustomerUpdateCustomFieldResponseRequest } from '../models';
// @ts-ignore
import { CustomerUpdateCustomFieldResponseResponseInner } from '../models';
// @ts-ignore
import { CustomerUpdateDetailsRequest } from '../models';
// @ts-ignore
import { CustomerUpdateDetailsRequestBillingAddress } from '../models';
// @ts-ignore
import { CustomerUpdateDetailsResponse } from '../models';
// @ts-ignore
import { CustomerUpdatePaymentCardTokenRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomerApi - axios parameter creator
 * @export
 */
export const CustomerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add subscription to existing customer
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} customerUniqueId The unique identifier of the customer in the Billsby platform
         * @param {CustomerAddSubscriptionToExistingCustomerRequest} [customerAddSubscriptionToExistingCustomerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscriptionToExistingCustomer: async (companyDomain: string, customerUniqueId: string, customerAddSubscriptionToExistingCustomerRequest?: CustomerAddSubscriptionToExistingCustomerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addSubscriptionToExistingCustomer', 'companyDomain', companyDomain)
            // verify required parameter 'customerUniqueId' is not null or undefined
            assertParamExists('addSubscriptionToExistingCustomer', 'customerUniqueId', customerUniqueId)
            const localVarPath = `/{companyDomain}/customers/{customerUniqueId}/subscriptions`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"customerUniqueId"}}`, encodeURIComponent(String(customerUniqueId !== undefined ? customerUniqueId : `-customerUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customerAddSubscriptionToExistingCustomerRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customers/{customerUniqueId}/subscriptions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customerAddSubscriptionToExistingCustomerRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Clear customer data (GDPR)
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} customerUniqueId The unique identifier of the customer in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearGdprData: async (companyDomain: string, customerUniqueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('clearGdprData', 'companyDomain', companyDomain)
            // verify required parameter 'customerUniqueId' is not null or undefined
            assertParamExists('clearGdprData', 'customerUniqueId', customerUniqueId)
            const localVarPath = `/{companyDomain}/customers/{customerUniqueId}/gdprcleanup`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"customerUniqueId"}}`, encodeURIComponent(String(customerUniqueId !== undefined ? customerUniqueId : `-customerUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customers/{customerUniqueId}/gdprcleanup',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new customer and subscription
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {CustomerCreateNewCustomerAndSubscriptionRequest} [customerCreateNewCustomerAndSubscriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCustomerAndSubscription: async (companyDomain: string, customerCreateNewCustomerAndSubscriptionRequest?: CustomerCreateNewCustomerAndSubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('createNewCustomerAndSubscription', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/subscriptions`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customerCreateNewCustomerAndSubscriptionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/subscriptions',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customerCreateNewCustomerAndSubscriptionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create without subscription
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {CustomerCreateWithoutSubscriptionRequest} [customerCreateWithoutSubscriptionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWithoutSubscription: async (companyDomain: string, customerCreateWithoutSubscriptionRequest?: CustomerCreateWithoutSubscriptionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('createWithoutSubscription', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/customers`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customerCreateWithoutSubscriptionRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customers',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customerCreateWithoutSubscriptionRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a customer
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} customerUniqueId The unique identifier of the customer in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById: async (companyDomain: string, customerUniqueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('deleteById', 'companyDomain', companyDomain)
            // verify required parameter 'customerUniqueId' is not null or undefined
            assertParamExists('deleteById', 'customerUniqueId', customerUniqueId)
            const localVarPath = `/{companyDomain}/customers/{customerUniqueId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"customerUniqueId"}}`, encodeURIComponent(String(customerUniqueId !== undefined ? customerUniqueId : `-customerUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customers/{customerUniqueId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This query gets individual customer\'s credit notes
         * @summary Customer credit notes
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} customerUniqueId The unique identifier of the customer in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreditNotes: async (companyDomain: string, customerUniqueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getCreditNotes', 'companyDomain', companyDomain)
            // verify required parameter 'customerUniqueId' is not null or undefined
            assertParamExists('getCreditNotes', 'customerUniqueId', customerUniqueId)
            const localVarPath = `/{companyDomain}/customers/{customerUniqueId}/creditNotes`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"customerUniqueId"}}`, encodeURIComponent(String(customerUniqueId !== undefined ? customerUniqueId : `-customerUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customers/{customerUniqueId}/creditNotes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This query gets individual customer details using the unique identifier provided in the Billsby platform
         * @summary Customer details
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} customerUniqueId The unique identifier of the customer in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (companyDomain: string, customerUniqueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getDetails', 'companyDomain', companyDomain)
            // verify required parameter 'customerUniqueId' is not null or undefined
            assertParamExists('getDetails', 'customerUniqueId', customerUniqueId)
            const localVarPath = `/{companyDomain}/customers/{customerUniqueId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"customerUniqueId"}}`, encodeURIComponent(String(customerUniqueId !== undefined ? customerUniqueId : `-customerUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customers/{customerUniqueId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Customer feature tags
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} customerUniqueId The unique identifier of the customer in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureTags: async (companyDomain: string, customerUniqueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getFeatureTags', 'companyDomain', companyDomain)
            // verify required parameter 'customerUniqueId' is not null or undefined
            assertParamExists('getFeatureTags', 'customerUniqueId', customerUniqueId)
            const localVarPath = `/{companyDomain}/customers/{customerUniqueId}/subscriptions/featuretags`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"customerUniqueId"}}`, encodeURIComponent(String(customerUniqueId !== undefined ? customerUniqueId : `-customerUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customers/{customerUniqueId}/subscriptions/featuretags',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This query gets individual customer\'s subscriptions using the unique identifier provided in the Billsby platform
         * @summary Customer subscriptions
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} customerUniqueId The unique identifier of the customer in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionsByUniqueId: async (companyDomain: string, customerUniqueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getSubscriptionsByUniqueId', 'companyDomain', companyDomain)
            // verify required parameter 'customerUniqueId' is not null or undefined
            assertParamExists('getSubscriptionsByUniqueId', 'customerUniqueId', customerUniqueId)
            const localVarPath = `/{companyDomain}/customers/{customerUniqueId}/subscriptions`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"customerUniqueId"}}`, encodeURIComponent(String(customerUniqueId !== undefined ? customerUniqueId : `-customerUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customers/{customerUniqueId}/subscriptions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List customers
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {number} page The page of customers you would like to view
         * @param {number} pageSize The number of records to return per page (max 100)
         * @param {string} [search] Filter customers by name (this can be a partial name)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers: async (companyDomain: string, page: number, pageSize: number, search?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listCustomers', 'companyDomain', companyDomain)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('listCustomers', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('listCustomers', 'pageSize', pageSize)
            const localVarPath = `/{companyDomain}/customers`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customers',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update customer response to custom fields
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {number} customFieldResponseId The unique identifier for an individual customers response to a question
         * @param {CustomerUpdateCustomFieldResponseRequest} [customerUpdateCustomFieldResponseRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomFieldResponse: async (companyDomain: string, customFieldResponseId: number, customerUpdateCustomFieldResponseRequest?: CustomerUpdateCustomFieldResponseRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateCustomFieldResponse', 'companyDomain', companyDomain)
            // verify required parameter 'customFieldResponseId' is not null or undefined
            assertParamExists('updateCustomFieldResponse', 'customFieldResponseId', customFieldResponseId)
            const localVarPath = `/{companyDomain}/customfieldResponses/{customFieldResponseId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"customFieldResponseId"}}`, encodeURIComponent(String(customFieldResponseId !== undefined ? customFieldResponseId : `-customFieldResponseId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customerUpdateCustomFieldResponseRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customfieldResponses/{customFieldResponseId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customerUpdateCustomFieldResponseRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update customer
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} customerUniqueId The unique identifier of the customer in the Billsby platform
         * @param {CustomerUpdateDetailsRequest} [customerUpdateDetailsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetails: async (companyDomain: string, customerUniqueId: string, customerUpdateDetailsRequest?: CustomerUpdateDetailsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateDetails', 'companyDomain', companyDomain)
            // verify required parameter 'customerUniqueId' is not null or undefined
            assertParamExists('updateDetails', 'customerUniqueId', customerUniqueId)
            const localVarPath = `/{companyDomain}/customers/{customerUniqueId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"customerUniqueId"}}`, encodeURIComponent(String(customerUniqueId !== undefined ? customerUniqueId : `-customerUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customerUpdateDetailsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customers/{customerUniqueId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customerUpdateDetailsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update payment card token
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} customerUniqueId The unique identifier of the customer in the Billsby platform
         * @param {CustomerUpdatePaymentCardTokenRequest} [customerUpdatePaymentCardTokenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentCardToken: async (companyDomain: string, customerUniqueId: string, customerUpdatePaymentCardTokenRequest?: CustomerUpdatePaymentCardTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updatePaymentCardToken', 'companyDomain', companyDomain)
            // verify required parameter 'customerUniqueId' is not null or undefined
            assertParamExists('updatePaymentCardToken', 'customerUniqueId', customerUniqueId)
            const localVarPath = `/{companyDomain}/customers/{customerUniqueId}/paymentCard`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"customerUniqueId"}}`, encodeURIComponent(String(customerUniqueId !== undefined ? customerUniqueId : `-customerUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customerUpdatePaymentCardTokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customers/{customerUniqueId}/paymentCard',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customerUpdatePaymentCardTokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Request to update payment details
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} customerUniqueId The unique identifier of the customer in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentDetailsRequest: async (companyDomain: string, customerUniqueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updatePaymentDetailsRequest', 'companyDomain', companyDomain)
            // verify required parameter 'customerUniqueId' is not null or undefined
            assertParamExists('updatePaymentDetailsRequest', 'customerUniqueId', customerUniqueId)
            const localVarPath = `/{companyDomain}/customers/{customerUniqueId}/paymentdetailsrequest`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"customerUniqueId"}}`, encodeURIComponent(String(customerUniqueId !== undefined ? customerUniqueId : `-customerUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customers/{customerUniqueId}/paymentdetailsrequest',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomerApi - functional programming interface
 * @export
 */
export const CustomerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add subscription to existing customer
         * @param {CustomerApiAddSubscriptionToExistingCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addSubscriptionToExistingCustomer(requestParameters: CustomerApiAddSubscriptionToExistingCustomerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerAddSubscriptionToExistingCustomerResponse>> {
            const customerAddSubscriptionToExistingCustomerRequest: CustomerAddSubscriptionToExistingCustomerRequest = {
                cycleId: requestParameters.cycleId,
                units: requestParameters.units,
                address: requestParameters.address,
                shippingAddress: requestParameters.shippingAddress,
                additionalEmail: requestParameters.additionalEmail,
                phoneNumberDialCountry: requestParameters.phoneNumberDialCountry,
                phoneNumberDialCode: requestParameters.phoneNumberDialCode,
                phoneNumber: requestParameters.phoneNumber,
                marketingConsent: requestParameters.marketingConsent,
                taxRegNumber: requestParameters.taxRegNumber,
                ipAddress: requestParameters.ipAddress,
                customFieldResponse: requestParameters.customFieldResponse,
                addOns: requestParameters.addOns,
                allowances: requestParameters.allowances,
                couponCodes: requestParameters.couponCodes
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addSubscriptionToExistingCustomer(requestParameters.companyDomain, requestParameters.customerUniqueId, customerAddSubscriptionToExistingCustomerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Clear customer data (GDPR)
         * @param {CustomerApiClearGdprDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async clearGdprData(requestParameters: CustomerApiClearGdprDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.clearGdprData(requestParameters.companyDomain, requestParameters.customerUniqueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new customer and subscription
         * @param {CustomerApiCreateNewCustomerAndSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewCustomerAndSubscription(requestParameters: CustomerApiCreateNewCustomerAndSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerCreateNewCustomerAndSubscriptionResponse>> {
            const customerCreateNewCustomerAndSubscriptionRequest: CustomerCreateNewCustomerAndSubscriptionRequest = {
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName,
                email: requestParameters.email,
                cycleId: requestParameters.cycleId,
                Units: requestParameters.Units,
                address: requestParameters.address,
                shippingAddress: requestParameters.shippingAddress,
                additionalEmail: requestParameters.additionalEmail,
                phoneNumberDialCountry: requestParameters.phoneNumberDialCountry,
                phoneNumberDialCode: requestParameters.phoneNumberDialCode,
                phoneNumber: requestParameters.phoneNumber,
                marketingConsent: requestParameters.marketingConsent,
                customFieldResponse: requestParameters.customFieldResponse,
                addOns: requestParameters.addOns,
                allowances: requestParameters.allowances,
                couponCodes: requestParameters.couponCodes,
                cardDetails: requestParameters.cardDetails
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewCustomerAndSubscription(requestParameters.companyDomain, customerCreateNewCustomerAndSubscriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create without subscription
         * @param {CustomerApiCreateWithoutSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWithoutSubscription(requestParameters: CustomerApiCreateWithoutSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerCreateWithoutSubscriptionResponse>> {
            const customerCreateWithoutSubscriptionRequest: CustomerCreateWithoutSubscriptionRequest = {
                addressLine1: requestParameters.addressLine1,
                addressLine2: requestParameters.addressLine2,
                city: requestParameters.city,
                state: requestParameters.state,
                country: requestParameters.country,
                postCode: requestParameters.postCode,
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName,
                email: requestParameters.email,
                cardDetails: requestParameters.cardDetails
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWithoutSubscription(requestParameters.companyDomain, customerCreateWithoutSubscriptionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a customer
         * @param {CustomerApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteById(requestParameters: CustomerApiDeleteByIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteById(requestParameters.companyDomain, requestParameters.customerUniqueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This query gets individual customer\'s credit notes
         * @summary Customer credit notes
         * @param {CustomerApiGetCreditNotesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCreditNotes(requestParameters: CustomerApiGetCreditNotesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerGetCreditNotesResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCreditNotes(requestParameters.companyDomain, requestParameters.customerUniqueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This query gets individual customer details using the unique identifier provided in the Billsby platform
         * @summary Customer details
         * @param {CustomerApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: CustomerApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerGetDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.companyDomain, requestParameters.customerUniqueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Customer feature tags
         * @param {CustomerApiGetFeatureTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFeatureTags(requestParameters: CustomerApiGetFeatureTagsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFeatureTags(requestParameters.companyDomain, requestParameters.customerUniqueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This query gets individual customer\'s subscriptions using the unique identifier provided in the Billsby platform
         * @summary Customer subscriptions
         * @param {CustomerApiGetSubscriptionsByUniqueIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionsByUniqueId(requestParameters: CustomerApiGetSubscriptionsByUniqueIdRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerGetSubscriptionsByUniqueIdResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSubscriptionsByUniqueId(requestParameters.companyDomain, requestParameters.customerUniqueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List customers
         * @param {CustomerApiListCustomersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCustomers(requestParameters: CustomerApiListCustomersRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCustomers(requestParameters.companyDomain, requestParameters.page, requestParameters.pageSize, requestParameters.search, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update customer response to custom fields
         * @param {CustomerApiUpdateCustomFieldResponseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCustomFieldResponse(requestParameters: CustomerApiUpdateCustomFieldResponseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomerUpdateCustomFieldResponseResponseInner>>> {
            const customerUpdateCustomFieldResponseRequest: CustomerUpdateCustomFieldResponseRequest = {
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCustomFieldResponse(requestParameters.companyDomain, requestParameters.customFieldResponseId, customerUpdateCustomFieldResponseRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update customer
         * @param {CustomerApiUpdateDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateDetails(requestParameters: CustomerApiUpdateDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CustomerUpdateDetailsResponse>> {
            const customerUpdateDetailsRequest: CustomerUpdateDetailsRequest = {
                firstName: requestParameters.firstName,
                lastName: requestParameters.lastName,
                phoneNumberDialCountry: requestParameters.phoneNumberDialCountry,
                phoneNumberDialCode: requestParameters.phoneNumberDialCode,
                email: requestParameters.email,
                phoneNumber: requestParameters.phoneNumber,
                billingAddress: requestParameters.billingAddress
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateDetails(requestParameters.companyDomain, requestParameters.customerUniqueId, customerUpdateDetailsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update payment card token
         * @param {CustomerApiUpdatePaymentCardTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePaymentCardToken(requestParameters: CustomerApiUpdatePaymentCardTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const customerUpdatePaymentCardTokenRequest: CustomerUpdatePaymentCardTokenRequest = {
                fullName: requestParameters.fullName,
                paymentCardtoken: requestParameters.paymentCardtoken,
                expiryMonth: requestParameters.expiryMonth,
                expiryYear: requestParameters.expiryYear,
                cardType: requestParameters.cardType,
                last4Digits: requestParameters.last4Digits
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePaymentCardToken(requestParameters.companyDomain, requestParameters.customerUniqueId, customerUpdatePaymentCardTokenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Request to update payment details
         * @param {CustomerApiUpdatePaymentDetailsRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePaymentDetailsRequest(requestParameters: CustomerApiUpdatePaymentDetailsRequestRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePaymentDetailsRequest(requestParameters.companyDomain, requestParameters.customerUniqueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomerApi - factory interface
 * @export
 */
export const CustomerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomerApiFp(configuration)
    return {
        /**
         * 
         * @summary Add subscription to existing customer
         * @param {CustomerApiAddSubscriptionToExistingCustomerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addSubscriptionToExistingCustomer(requestParameters: CustomerApiAddSubscriptionToExistingCustomerRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerAddSubscriptionToExistingCustomerResponse> {
            return localVarFp.addSubscriptionToExistingCustomer(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Clear customer data (GDPR)
         * @param {CustomerApiClearGdprDataRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        clearGdprData(requestParameters: CustomerApiClearGdprDataRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.clearGdprData(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new customer and subscription
         * @param {CustomerApiCreateNewCustomerAndSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewCustomerAndSubscription(requestParameters: CustomerApiCreateNewCustomerAndSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerCreateNewCustomerAndSubscriptionResponse> {
            return localVarFp.createNewCustomerAndSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create without subscription
         * @param {CustomerApiCreateWithoutSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWithoutSubscription(requestParameters: CustomerApiCreateWithoutSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerCreateWithoutSubscriptionResponse> {
            return localVarFp.createWithoutSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a customer
         * @param {CustomerApiDeleteByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteById(requestParameters: CustomerApiDeleteByIdRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.deleteById(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This query gets individual customer\'s credit notes
         * @summary Customer credit notes
         * @param {CustomerApiGetCreditNotesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCreditNotes(requestParameters: CustomerApiGetCreditNotesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CustomerGetCreditNotesResponseInner>> {
            return localVarFp.getCreditNotes(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This query gets individual customer details using the unique identifier provided in the Billsby platform
         * @summary Customer details
         * @param {CustomerApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: CustomerApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerGetDetailsResponse> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Customer feature tags
         * @param {CustomerApiGetFeatureTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFeatureTags(requestParameters: CustomerApiGetFeatureTagsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.getFeatureTags(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This query gets individual customer\'s subscriptions using the unique identifier provided in the Billsby platform
         * @summary Customer subscriptions
         * @param {CustomerApiGetSubscriptionsByUniqueIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionsByUniqueId(requestParameters: CustomerApiGetSubscriptionsByUniqueIdRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CustomerGetSubscriptionsByUniqueIdResponseInner>> {
            return localVarFp.getSubscriptionsByUniqueId(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List customers
         * @param {CustomerApiListCustomersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCustomers(requestParameters: CustomerApiListCustomersRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.listCustomers(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update customer response to custom fields
         * @param {CustomerApiUpdateCustomFieldResponseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCustomFieldResponse(requestParameters: CustomerApiUpdateCustomFieldResponseRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CustomerUpdateCustomFieldResponseResponseInner>> {
            return localVarFp.updateCustomFieldResponse(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update customer
         * @param {CustomerApiUpdateDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateDetails(requestParameters: CustomerApiUpdateDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<CustomerUpdateDetailsResponse> {
            return localVarFp.updateDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update payment card token
         * @param {CustomerApiUpdatePaymentCardTokenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentCardToken(requestParameters: CustomerApiUpdatePaymentCardTokenRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updatePaymentCardToken(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Request to update payment details
         * @param {CustomerApiUpdatePaymentDetailsRequestRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePaymentDetailsRequest(requestParameters: CustomerApiUpdatePaymentDetailsRequestRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updatePaymentDetailsRequest(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addSubscriptionToExistingCustomer operation in CustomerApi.
 * @export
 * @interface CustomerApiAddSubscriptionToExistingCustomerRequest
 */
export type CustomerApiAddSubscriptionToExistingCustomerRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CustomerApiAddSubscriptionToExistingCustomer
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the customer in the Billsby platform
    * @type {string}
    * @memberof CustomerApiAddSubscriptionToExistingCustomer
    */
    readonly customerUniqueId: string
    
} & CustomerAddSubscriptionToExistingCustomerRequest

/**
 * Request parameters for clearGdprData operation in CustomerApi.
 * @export
 * @interface CustomerApiClearGdprDataRequest
 */
export type CustomerApiClearGdprDataRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CustomerApiClearGdprData
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the customer in the Billsby platform
    * @type {string}
    * @memberof CustomerApiClearGdprData
    */
    readonly customerUniqueId: string
    
}

/**
 * Request parameters for createNewCustomerAndSubscription operation in CustomerApi.
 * @export
 * @interface CustomerApiCreateNewCustomerAndSubscriptionRequest
 */
export type CustomerApiCreateNewCustomerAndSubscriptionRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CustomerApiCreateNewCustomerAndSubscription
    */
    readonly companyDomain: string
    
} & CustomerCreateNewCustomerAndSubscriptionRequest

/**
 * Request parameters for createWithoutSubscription operation in CustomerApi.
 * @export
 * @interface CustomerApiCreateWithoutSubscriptionRequest
 */
export type CustomerApiCreateWithoutSubscriptionRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CustomerApiCreateWithoutSubscription
    */
    readonly companyDomain: string
    
} & CustomerCreateWithoutSubscriptionRequest

/**
 * Request parameters for deleteById operation in CustomerApi.
 * @export
 * @interface CustomerApiDeleteByIdRequest
 */
export type CustomerApiDeleteByIdRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CustomerApiDeleteById
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the customer in the Billsby platform
    * @type {string}
    * @memberof CustomerApiDeleteById
    */
    readonly customerUniqueId: string
    
}

/**
 * Request parameters for getCreditNotes operation in CustomerApi.
 * @export
 * @interface CustomerApiGetCreditNotesRequest
 */
export type CustomerApiGetCreditNotesRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CustomerApiGetCreditNotes
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the customer in the Billsby platform
    * @type {string}
    * @memberof CustomerApiGetCreditNotes
    */
    readonly customerUniqueId: string
    
}

/**
 * Request parameters for getDetails operation in CustomerApi.
 * @export
 * @interface CustomerApiGetDetailsRequest
 */
export type CustomerApiGetDetailsRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CustomerApiGetDetails
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the customer in the Billsby platform
    * @type {string}
    * @memberof CustomerApiGetDetails
    */
    readonly customerUniqueId: string
    
}

/**
 * Request parameters for getFeatureTags operation in CustomerApi.
 * @export
 * @interface CustomerApiGetFeatureTagsRequest
 */
export type CustomerApiGetFeatureTagsRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CustomerApiGetFeatureTags
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the customer in the Billsby platform
    * @type {string}
    * @memberof CustomerApiGetFeatureTags
    */
    readonly customerUniqueId: string
    
}

/**
 * Request parameters for getSubscriptionsByUniqueId operation in CustomerApi.
 * @export
 * @interface CustomerApiGetSubscriptionsByUniqueIdRequest
 */
export type CustomerApiGetSubscriptionsByUniqueIdRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CustomerApiGetSubscriptionsByUniqueId
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the customer in the Billsby platform
    * @type {string}
    * @memberof CustomerApiGetSubscriptionsByUniqueId
    */
    readonly customerUniqueId: string
    
}

/**
 * Request parameters for listCustomers operation in CustomerApi.
 * @export
 * @interface CustomerApiListCustomersRequest
 */
export type CustomerApiListCustomersRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CustomerApiListCustomers
    */
    readonly companyDomain: string
    
    /**
    * The page of customers you would like to view
    * @type {number}
    * @memberof CustomerApiListCustomers
    */
    readonly page: number
    
    /**
    * The number of records to return per page (max 100)
    * @type {number}
    * @memberof CustomerApiListCustomers
    */
    readonly pageSize: number
    
    /**
    * Filter customers by name (this can be a partial name)
    * @type {string}
    * @memberof CustomerApiListCustomers
    */
    readonly search?: string
    
}

/**
 * Request parameters for updateCustomFieldResponse operation in CustomerApi.
 * @export
 * @interface CustomerApiUpdateCustomFieldResponseRequest
 */
export type CustomerApiUpdateCustomFieldResponseRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CustomerApiUpdateCustomFieldResponse
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier for an individual customers response to a question
    * @type {number}
    * @memberof CustomerApiUpdateCustomFieldResponse
    */
    readonly customFieldResponseId: number
    
} & CustomerUpdateCustomFieldResponseRequest

/**
 * Request parameters for updateDetails operation in CustomerApi.
 * @export
 * @interface CustomerApiUpdateDetailsRequest
 */
export type CustomerApiUpdateDetailsRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CustomerApiUpdateDetails
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the customer in the Billsby platform
    * @type {string}
    * @memberof CustomerApiUpdateDetails
    */
    readonly customerUniqueId: string
    
} & CustomerUpdateDetailsRequest

/**
 * Request parameters for updatePaymentCardToken operation in CustomerApi.
 * @export
 * @interface CustomerApiUpdatePaymentCardTokenRequest
 */
export type CustomerApiUpdatePaymentCardTokenRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CustomerApiUpdatePaymentCardToken
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the customer in the Billsby platform
    * @type {string}
    * @memberof CustomerApiUpdatePaymentCardToken
    */
    readonly customerUniqueId: string
    
} & CustomerUpdatePaymentCardTokenRequest

/**
 * Request parameters for updatePaymentDetailsRequest operation in CustomerApi.
 * @export
 * @interface CustomerApiUpdatePaymentDetailsRequestRequest
 */
export type CustomerApiUpdatePaymentDetailsRequestRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CustomerApiUpdatePaymentDetailsRequest
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the customer in the Billsby platform
    * @type {string}
    * @memberof CustomerApiUpdatePaymentDetailsRequest
    */
    readonly customerUniqueId: string
    
}

/**
 * CustomerApiGenerated - object-oriented interface
 * @export
 * @class CustomerApiGenerated
 * @extends {BaseAPI}
 */
export class CustomerApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Add subscription to existing customer
     * @param {CustomerApiAddSubscriptionToExistingCustomerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public addSubscriptionToExistingCustomer(requestParameters: CustomerApiAddSubscriptionToExistingCustomerRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).addSubscriptionToExistingCustomer(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Clear customer data (GDPR)
     * @param {CustomerApiClearGdprDataRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public clearGdprData(requestParameters: CustomerApiClearGdprDataRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).clearGdprData(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new customer and subscription
     * @param {CustomerApiCreateNewCustomerAndSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public createNewCustomerAndSubscription(requestParameters: CustomerApiCreateNewCustomerAndSubscriptionRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).createNewCustomerAndSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create without subscription
     * @param {CustomerApiCreateWithoutSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public createWithoutSubscription(requestParameters: CustomerApiCreateWithoutSubscriptionRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).createWithoutSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a customer
     * @param {CustomerApiDeleteByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public deleteById(requestParameters: CustomerApiDeleteByIdRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).deleteById(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This query gets individual customer\'s credit notes
     * @summary Customer credit notes
     * @param {CustomerApiGetCreditNotesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public getCreditNotes(requestParameters: CustomerApiGetCreditNotesRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).getCreditNotes(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This query gets individual customer details using the unique identifier provided in the Billsby platform
     * @summary Customer details
     * @param {CustomerApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public getDetails(requestParameters: CustomerApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Customer feature tags
     * @param {CustomerApiGetFeatureTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public getFeatureTags(requestParameters: CustomerApiGetFeatureTagsRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).getFeatureTags(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This query gets individual customer\'s subscriptions using the unique identifier provided in the Billsby platform
     * @summary Customer subscriptions
     * @param {CustomerApiGetSubscriptionsByUniqueIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public getSubscriptionsByUniqueId(requestParameters: CustomerApiGetSubscriptionsByUniqueIdRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).getSubscriptionsByUniqueId(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List customers
     * @param {CustomerApiListCustomersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public listCustomers(requestParameters: CustomerApiListCustomersRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).listCustomers(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update customer response to custom fields
     * @param {CustomerApiUpdateCustomFieldResponseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public updateCustomFieldResponse(requestParameters: CustomerApiUpdateCustomFieldResponseRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).updateCustomFieldResponse(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update customer
     * @param {CustomerApiUpdateDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public updateDetails(requestParameters: CustomerApiUpdateDetailsRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).updateDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update payment card token
     * @param {CustomerApiUpdatePaymentCardTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public updatePaymentCardToken(requestParameters: CustomerApiUpdatePaymentCardTokenRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).updatePaymentCardToken(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Request to update payment details
     * @param {CustomerApiUpdatePaymentDetailsRequestRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomerApiGenerated
     */
    public updatePaymentDetailsRequest(requestParameters: CustomerApiUpdatePaymentDetailsRequestRequest, options?: AxiosRequestConfig) {
        return CustomerApiFp(this.configuration).updatePaymentDetailsRequest(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
