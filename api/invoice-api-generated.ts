/* tslint:disable */
/* eslint-disable */
/*
Billsby API

Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.

Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.    

Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.

If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build. 

Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..

The version of the OpenAPI document: 1.3.5


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InvoiceCreateOneTimeChargeRequest } from '../models';
// @ts-ignore
import { InvoiceCreateRefundRequest } from '../models';
// @ts-ignore
import { InvoiceCreateRefundResponse } from '../models';
// @ts-ignore
import { InvoiceDetailsResponse } from '../models';
// @ts-ignore
import { InvoiceGetCustomerInvoicesResponseInner } from '../models';
// @ts-ignore
import { InvoiceGetPaymentLogsResponseInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * InvoiceApi - axios parameter creator
 * @export
 */
export const InvoiceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This query creates a one-time charge for an individual customer
         * @summary Create a one-time charge
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} customerUniqueId The unique identifier of the customer in the Billsby platform
         * @param {InvoiceCreateOneTimeChargeRequest} [invoiceCreateOneTimeChargeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneTimeCharge: async (companyDomain: string, customerUniqueId: string, invoiceCreateOneTimeChargeRequest?: InvoiceCreateOneTimeChargeRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('createOneTimeCharge', 'companyDomain', companyDomain)
            // verify required parameter 'customerUniqueId' is not null or undefined
            assertParamExists('createOneTimeCharge', 'customerUniqueId', customerUniqueId)
            const localVarPath = `/{companyDomain}/customers/{customerUniqueId}/invoices`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"customerUniqueId"}}`, encodeURIComponent(String(customerUniqueId !== undefined ? customerUniqueId : `-customerUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: invoiceCreateOneTimeChargeRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customers/{customerUniqueId}/invoices',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(invoiceCreateOneTimeChargeRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refund an invoice
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} customerUniqueId The unique identifier of the customer in the Billsby platform
         * @param {InvoiceCreateRefundRequest} [invoiceCreateRefundRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRefund: async (companyDomain: string, customerUniqueId: string, invoiceCreateRefundRequest?: InvoiceCreateRefundRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('createRefund', 'companyDomain', companyDomain)
            // verify required parameter 'customerUniqueId' is not null or undefined
            assertParamExists('createRefund', 'customerUniqueId', customerUniqueId)
            const localVarPath = `/{companyDomain}/customers/{customerUniqueId}/refunds`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"customerUniqueId"}}`, encodeURIComponent(String(customerUniqueId !== undefined ? customerUniqueId : `-customerUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: invoiceCreateRefundRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customers/{customerUniqueId}/refunds',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(invoiceCreateRefundRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Individual invoices
         * @param {string} invoiceNumber The invoice number for the invoice you\&#39;d like to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        details: async (invoiceNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceNumber' is not null or undefined
            assertParamExists('details', 'invoiceNumber', invoiceNumber)
            const localVarPath = `/invoices/{invoiceNumber}`
                .replace(`{${"invoiceNumber"}}`, encodeURIComponent(String(invoiceNumber !== undefined ? invoiceNumber : `-invoiceNumber-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/invoices/{invoiceNumber}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This query gets individual customer\'s invoices
         * @summary Customer invoices
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} customerUniqueId The unique identifier of the customer in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerInvoices: async (companyDomain: string, customerUniqueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getCustomerInvoices', 'companyDomain', companyDomain)
            // verify required parameter 'customerUniqueId' is not null or undefined
            assertParamExists('getCustomerInvoices', 'customerUniqueId', customerUniqueId)
            const localVarPath = `/{companyDomain}/customers/{customerUniqueId}/invoices`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"customerUniqueId"}}`, encodeURIComponent(String(customerUniqueId !== undefined ? customerUniqueId : `-customerUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customers/{customerUniqueId}/invoices',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Customer payment logs
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} customerUniqueId The unique identifier of the customer in the Billsby platform
         * @param {string} invoiceNumber The unique identifier of the invoice in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentLogs: async (companyDomain: string, customerUniqueId: string, invoiceNumber: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getPaymentLogs', 'companyDomain', companyDomain)
            // verify required parameter 'customerUniqueId' is not null or undefined
            assertParamExists('getPaymentLogs', 'customerUniqueId', customerUniqueId)
            // verify required parameter 'invoiceNumber' is not null or undefined
            assertParamExists('getPaymentLogs', 'invoiceNumber', invoiceNumber)
            const localVarPath = `/{companyDomain}/customers/{customerUniqueId}/invoices/{invoiceNumber}/paymentlogs`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"customerUniqueId"}}`, encodeURIComponent(String(customerUniqueId !== undefined ? customerUniqueId : `-customerUniqueId-`)))
                .replace(`{${"invoiceNumber"}}`, encodeURIComponent(String(invoiceNumber !== undefined ? invoiceNumber : `-invoiceNumber-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customers/{customerUniqueId}/invoices/{invoiceNumber}/paymentlogs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of your company\'s invoices
         * @summary Company invoices
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {number} page The page of invoices you would like to view
         * @param {number} pageSize The number of records to return per page (max 100)
         * @param {string} [query] Add search terms here to filter results
         * @param {string} [orderBy] Sort the results by particular properties
         * @param {string} [orderByDescending] Sort the results by particular properties in descending order
         * @param {boolean} [isPending] Do you want to show invoices with the status \&#39;pending\&#39;; true or false
         * @param {boolean} [isPaid] Do you want to show invoices with the status \&#39;paid\&#39;; true or false
         * @param {string} [isUnpaid] Do you want to show invoices with the status \&#39;unpaid\&#39;; true or false
         * @param {boolean} [isPaidOffline] Do you want to show invoices with the status \&#39;paid offline\&#39;; true or false
         * @param {boolean} [isWrittenOff] Do you want to show invoices with the status \&#39;written off\&#39;; true or false
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanyInvoices: async (companyDomain: string, page: number, pageSize: number, query?: string, orderBy?: string, orderByDescending?: string, isPending?: boolean, isPaid?: boolean, isUnpaid?: string, isPaidOffline?: boolean, isWrittenOff?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listCompanyInvoices', 'companyDomain', companyDomain)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('listCompanyInvoices', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('listCompanyInvoices', 'pageSize', pageSize)
            const localVarPath = `/{companyDomain}/companies/invoices`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (orderByDescending !== undefined) {
                localVarQueryParameter['orderByDescending'] = orderByDescending;
            }

            if (isPending !== undefined) {
                localVarQueryParameter['isPending'] = isPending;
            }

            if (isPaid !== undefined) {
                localVarQueryParameter['isPaid'] = isPaid;
            }

            if (isUnpaid !== undefined) {
                localVarQueryParameter['isUnpaid'] = isUnpaid;
            }

            if (isPaidOffline !== undefined) {
                localVarQueryParameter['isPaidOffline'] = isPaidOffline;
            }

            if (isWrittenOff !== undefined) {
                localVarQueryParameter['isWrittenOff'] = isWrittenOff;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/companies/invoices',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark an invoice as paid offline
         * @summary Invoice paid offline
         * @param {string} invoiceNumber The unique identifier of the invoice in the Billsby platform
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsPaidOffline: async (invoiceNumber: string, companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceNumber' is not null or undefined
            assertParamExists('markAsPaidOffline', 'invoiceNumber', invoiceNumber)
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('markAsPaidOffline', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/invoices/{invoiceNumber}/PaidOffline`
                .replace(`{${"invoiceNumber"}}`, encodeURIComponent(String(invoiceNumber !== undefined ? invoiceNumber : `-invoiceNumber-`)))
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/invoices/{invoiceNumber}/PaidOffline',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Mark an invoice as written off
         * @summary Invoice written off
         * @param {string} invoiceNumber The unique identifier of the invoice in the Billsby platform
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markWrittenOff: async (invoiceNumber: string, companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceNumber' is not null or undefined
            assertParamExists('markWrittenOff', 'invoiceNumber', invoiceNumber)
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('markWrittenOff', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/invoices/{invoiceNumber}/WrittenOff`
                .replace(`{${"invoiceNumber"}}`, encodeURIComponent(String(invoiceNumber !== undefined ? invoiceNumber : `-invoiceNumber-`)))
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/invoices/{invoiceNumber}/WrittenOff',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Reattempt invoice payment
         * @param {string} invoiceNumber The unique identifier of the invoice in the Billsby platform
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reattemptPayment: async (invoiceNumber: string, companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceNumber' is not null or undefined
            assertParamExists('reattemptPayment', 'invoiceNumber', invoiceNumber)
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('reattemptPayment', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/invoices/{invoiceNumber}/Payment`
                .replace(`{${"invoiceNumber"}}`, encodeURIComponent(String(invoiceNumber !== undefined ? invoiceNumber : `-invoiceNumber-`)))
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/invoices/{invoiceNumber}/Payment',
                httpMethod: 'PUT'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoiceApi - functional programming interface
 * @export
 */
export const InvoiceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoiceApiAxiosParamCreator(configuration)
    return {
        /**
         * This query creates a one-time charge for an individual customer
         * @summary Create a one-time charge
         * @param {InvoiceApiCreateOneTimeChargeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOneTimeCharge(requestParameters: InvoiceApiCreateOneTimeChargeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const invoiceCreateOneTimeChargeRequest: InvoiceCreateOneTimeChargeRequest = {
                description: requestParameters.description,
                currencyCode: requestParameters.currencyCode,
                amount: requestParameters.amount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOneTimeCharge(requestParameters.companyDomain, requestParameters.customerUniqueId, invoiceCreateOneTimeChargeRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refund an invoice
         * @param {InvoiceApiCreateRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRefund(requestParameters: InvoiceApiCreateRefundRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceCreateRefundResponse>> {
            const invoiceCreateRefundRequest: InvoiceCreateRefundRequest = {
                invoiceNumber: requestParameters.invoiceNumber,
                amount: requestParameters.amount
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRefund(requestParameters.companyDomain, requestParameters.customerUniqueId, invoiceCreateRefundRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Individual invoices
         * @param {InvoiceApiDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async details(requestParameters: InvoiceApiDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.details(requestParameters.invoiceNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This query gets individual customer\'s invoices
         * @summary Customer invoices
         * @param {InvoiceApiGetCustomerInvoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCustomerInvoices(requestParameters: InvoiceApiGetCustomerInvoicesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InvoiceGetCustomerInvoicesResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCustomerInvoices(requestParameters.companyDomain, requestParameters.customerUniqueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Customer payment logs
         * @param {InvoiceApiGetPaymentLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPaymentLogs(requestParameters: InvoiceApiGetPaymentLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InvoiceGetPaymentLogsResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPaymentLogs(requestParameters.companyDomain, requestParameters.customerUniqueId, requestParameters.invoiceNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of your company\'s invoices
         * @summary Company invoices
         * @param {InvoiceApiListCompanyInvoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listCompanyInvoices(requestParameters: InvoiceApiListCompanyInvoicesRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listCompanyInvoices(requestParameters.companyDomain, requestParameters.page, requestParameters.pageSize, requestParameters.query, requestParameters.orderBy, requestParameters.orderByDescending, requestParameters.isPending, requestParameters.isPaid, requestParameters.isUnpaid, requestParameters.isPaidOffline, requestParameters.isWrittenOff, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Mark an invoice as paid offline
         * @summary Invoice paid offline
         * @param {InvoiceApiMarkAsPaidOfflineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markAsPaidOffline(requestParameters: InvoiceApiMarkAsPaidOfflineRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markAsPaidOffline(requestParameters.invoiceNumber, requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Mark an invoice as written off
         * @summary Invoice written off
         * @param {InvoiceApiMarkWrittenOffRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markWrittenOff(requestParameters: InvoiceApiMarkWrittenOffRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markWrittenOff(requestParameters.invoiceNumber, requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Reattempt invoice payment
         * @param {InvoiceApiReattemptPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reattemptPayment(requestParameters: InvoiceApiReattemptPaymentRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reattemptPayment(requestParameters.invoiceNumber, requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoiceApi - factory interface
 * @export
 */
export const InvoiceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoiceApiFp(configuration)
    return {
        /**
         * This query creates a one-time charge for an individual customer
         * @summary Create a one-time charge
         * @param {InvoiceApiCreateOneTimeChargeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOneTimeCharge(requestParameters: InvoiceApiCreateOneTimeChargeRequest, options?: AxiosRequestConfig): AxiosPromise<boolean> {
            return localVarFp.createOneTimeCharge(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refund an invoice
         * @param {InvoiceApiCreateRefundRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRefund(requestParameters: InvoiceApiCreateRefundRequest, options?: AxiosRequestConfig): AxiosPromise<InvoiceCreateRefundResponse> {
            return localVarFp.createRefund(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Individual invoices
         * @param {InvoiceApiDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        details(requestParameters: InvoiceApiDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<InvoiceDetailsResponse> {
            return localVarFp.details(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This query gets individual customer\'s invoices
         * @summary Customer invoices
         * @param {InvoiceApiGetCustomerInvoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCustomerInvoices(requestParameters: InvoiceApiGetCustomerInvoicesRequest, options?: AxiosRequestConfig): AxiosPromise<Array<InvoiceGetCustomerInvoicesResponseInner>> {
            return localVarFp.getCustomerInvoices(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Customer payment logs
         * @param {InvoiceApiGetPaymentLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPaymentLogs(requestParameters: InvoiceApiGetPaymentLogsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<InvoiceGetPaymentLogsResponseInner>> {
            return localVarFp.getPaymentLogs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of your company\'s invoices
         * @summary Company invoices
         * @param {InvoiceApiListCompanyInvoicesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listCompanyInvoices(requestParameters: InvoiceApiListCompanyInvoicesRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.listCompanyInvoices(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark an invoice as paid offline
         * @summary Invoice paid offline
         * @param {InvoiceApiMarkAsPaidOfflineRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markAsPaidOffline(requestParameters: InvoiceApiMarkAsPaidOfflineRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.markAsPaidOffline(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Mark an invoice as written off
         * @summary Invoice written off
         * @param {InvoiceApiMarkWrittenOffRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markWrittenOff(requestParameters: InvoiceApiMarkWrittenOffRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.markWrittenOff(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Reattempt invoice payment
         * @param {InvoiceApiReattemptPaymentRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reattemptPayment(requestParameters: InvoiceApiReattemptPaymentRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.reattemptPayment(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createOneTimeCharge operation in InvoiceApi.
 * @export
 * @interface InvoiceApiCreateOneTimeChargeRequest
 */
export type InvoiceApiCreateOneTimeChargeRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof InvoiceApiCreateOneTimeCharge
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the customer in the Billsby platform
    * @type {string}
    * @memberof InvoiceApiCreateOneTimeCharge
    */
    readonly customerUniqueId: string
    
} & InvoiceCreateOneTimeChargeRequest

/**
 * Request parameters for createRefund operation in InvoiceApi.
 * @export
 * @interface InvoiceApiCreateRefundRequest
 */
export type InvoiceApiCreateRefundRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof InvoiceApiCreateRefund
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the customer in the Billsby platform
    * @type {string}
    * @memberof InvoiceApiCreateRefund
    */
    readonly customerUniqueId: string
    
} & InvoiceCreateRefundRequest

/**
 * Request parameters for details operation in InvoiceApi.
 * @export
 * @interface InvoiceApiDetailsRequest
 */
export type InvoiceApiDetailsRequest = {
    
    /**
    * The invoice number for the invoice you\'d like to retrieve
    * @type {string}
    * @memberof InvoiceApiDetails
    */
    readonly invoiceNumber: string
    
}

/**
 * Request parameters for getCustomerInvoices operation in InvoiceApi.
 * @export
 * @interface InvoiceApiGetCustomerInvoicesRequest
 */
export type InvoiceApiGetCustomerInvoicesRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof InvoiceApiGetCustomerInvoices
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the customer in the Billsby platform
    * @type {string}
    * @memberof InvoiceApiGetCustomerInvoices
    */
    readonly customerUniqueId: string
    
}

/**
 * Request parameters for getPaymentLogs operation in InvoiceApi.
 * @export
 * @interface InvoiceApiGetPaymentLogsRequest
 */
export type InvoiceApiGetPaymentLogsRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof InvoiceApiGetPaymentLogs
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the customer in the Billsby platform
    * @type {string}
    * @memberof InvoiceApiGetPaymentLogs
    */
    readonly customerUniqueId: string
    
    /**
    * The unique identifier of the invoice in the Billsby platform
    * @type {string}
    * @memberof InvoiceApiGetPaymentLogs
    */
    readonly invoiceNumber: string
    
}

/**
 * Request parameters for listCompanyInvoices operation in InvoiceApi.
 * @export
 * @interface InvoiceApiListCompanyInvoicesRequest
 */
export type InvoiceApiListCompanyInvoicesRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof InvoiceApiListCompanyInvoices
    */
    readonly companyDomain: string
    
    /**
    * The page of invoices you would like to view
    * @type {number}
    * @memberof InvoiceApiListCompanyInvoices
    */
    readonly page: number
    
    /**
    * The number of records to return per page (max 100)
    * @type {number}
    * @memberof InvoiceApiListCompanyInvoices
    */
    readonly pageSize: number
    
    /**
    * Add search terms here to filter results
    * @type {string}
    * @memberof InvoiceApiListCompanyInvoices
    */
    readonly query?: string
    
    /**
    * Sort the results by particular properties
    * @type {string}
    * @memberof InvoiceApiListCompanyInvoices
    */
    readonly orderBy?: string
    
    /**
    * Sort the results by particular properties in descending order
    * @type {string}
    * @memberof InvoiceApiListCompanyInvoices
    */
    readonly orderByDescending?: string
    
    /**
    * Do you want to show invoices with the status \'pending\'; true or false
    * @type {boolean}
    * @memberof InvoiceApiListCompanyInvoices
    */
    readonly isPending?: boolean
    
    /**
    * Do you want to show invoices with the status \'paid\'; true or false
    * @type {boolean}
    * @memberof InvoiceApiListCompanyInvoices
    */
    readonly isPaid?: boolean
    
    /**
    * Do you want to show invoices with the status \'unpaid\'; true or false
    * @type {string}
    * @memberof InvoiceApiListCompanyInvoices
    */
    readonly isUnpaid?: string
    
    /**
    * Do you want to show invoices with the status \'paid offline\'; true or false
    * @type {boolean}
    * @memberof InvoiceApiListCompanyInvoices
    */
    readonly isPaidOffline?: boolean
    
    /**
    * Do you want to show invoices with the status \'written off\'; true or false
    * @type {boolean}
    * @memberof InvoiceApiListCompanyInvoices
    */
    readonly isWrittenOff?: boolean
    
}

/**
 * Request parameters for markAsPaidOffline operation in InvoiceApi.
 * @export
 * @interface InvoiceApiMarkAsPaidOfflineRequest
 */
export type InvoiceApiMarkAsPaidOfflineRequest = {
    
    /**
    * The unique identifier of the invoice in the Billsby platform
    * @type {string}
    * @memberof InvoiceApiMarkAsPaidOffline
    */
    readonly invoiceNumber: string
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof InvoiceApiMarkAsPaidOffline
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for markWrittenOff operation in InvoiceApi.
 * @export
 * @interface InvoiceApiMarkWrittenOffRequest
 */
export type InvoiceApiMarkWrittenOffRequest = {
    
    /**
    * The unique identifier of the invoice in the Billsby platform
    * @type {string}
    * @memberof InvoiceApiMarkWrittenOff
    */
    readonly invoiceNumber: string
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof InvoiceApiMarkWrittenOff
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for reattemptPayment operation in InvoiceApi.
 * @export
 * @interface InvoiceApiReattemptPaymentRequest
 */
export type InvoiceApiReattemptPaymentRequest = {
    
    /**
    * The unique identifier of the invoice in the Billsby platform
    * @type {string}
    * @memberof InvoiceApiReattemptPayment
    */
    readonly invoiceNumber: string
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof InvoiceApiReattemptPayment
    */
    readonly companyDomain: string
    
}

/**
 * InvoiceApiGenerated - object-oriented interface
 * @export
 * @class InvoiceApiGenerated
 * @extends {BaseAPI}
 */
export class InvoiceApiGenerated extends BaseAPI {
    /**
     * This query creates a one-time charge for an individual customer
     * @summary Create a one-time charge
     * @param {InvoiceApiCreateOneTimeChargeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApiGenerated
     */
    public createOneTimeCharge(requestParameters: InvoiceApiCreateOneTimeChargeRequest, options?: AxiosRequestConfig) {
        return InvoiceApiFp(this.configuration).createOneTimeCharge(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refund an invoice
     * @param {InvoiceApiCreateRefundRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApiGenerated
     */
    public createRefund(requestParameters: InvoiceApiCreateRefundRequest, options?: AxiosRequestConfig) {
        return InvoiceApiFp(this.configuration).createRefund(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Individual invoices
     * @param {InvoiceApiDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApiGenerated
     */
    public details(requestParameters: InvoiceApiDetailsRequest, options?: AxiosRequestConfig) {
        return InvoiceApiFp(this.configuration).details(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This query gets individual customer\'s invoices
     * @summary Customer invoices
     * @param {InvoiceApiGetCustomerInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApiGenerated
     */
    public getCustomerInvoices(requestParameters: InvoiceApiGetCustomerInvoicesRequest, options?: AxiosRequestConfig) {
        return InvoiceApiFp(this.configuration).getCustomerInvoices(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Customer payment logs
     * @param {InvoiceApiGetPaymentLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApiGenerated
     */
    public getPaymentLogs(requestParameters: InvoiceApiGetPaymentLogsRequest, options?: AxiosRequestConfig) {
        return InvoiceApiFp(this.configuration).getPaymentLogs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of your company\'s invoices
     * @summary Company invoices
     * @param {InvoiceApiListCompanyInvoicesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApiGenerated
     */
    public listCompanyInvoices(requestParameters: InvoiceApiListCompanyInvoicesRequest, options?: AxiosRequestConfig) {
        return InvoiceApiFp(this.configuration).listCompanyInvoices(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mark an invoice as paid offline
     * @summary Invoice paid offline
     * @param {InvoiceApiMarkAsPaidOfflineRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApiGenerated
     */
    public markAsPaidOffline(requestParameters: InvoiceApiMarkAsPaidOfflineRequest, options?: AxiosRequestConfig) {
        return InvoiceApiFp(this.configuration).markAsPaidOffline(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Mark an invoice as written off
     * @summary Invoice written off
     * @param {InvoiceApiMarkWrittenOffRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApiGenerated
     */
    public markWrittenOff(requestParameters: InvoiceApiMarkWrittenOffRequest, options?: AxiosRequestConfig) {
        return InvoiceApiFp(this.configuration).markWrittenOff(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Reattempt invoice payment
     * @param {InvoiceApiReattemptPaymentRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApiGenerated
     */
    public reattemptPayment(requestParameters: InvoiceApiReattemptPaymentRequest, options?: AxiosRequestConfig) {
        return InvoiceApiFp(this.configuration).reattemptPayment(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
