/* tslint:disable */
/* eslint-disable */
/*
Billsby API

Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.

Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.    

Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.

If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build. 

Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..

The version of the OpenAPI document: 1.3.5


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ProductCreateCycleRequest } from '../models';
// @ts-ignore
import { ProductCreateCycleRequestAddonPlanInputModelsInner } from '../models';
// @ts-ignore
import { ProductCreateCycleRequestAllowancePlanInputModelInner } from '../models';
// @ts-ignore
import { ProductCreateCycleRequestCyclesInputModelInner } from '../models';
// @ts-ignore
import { ProductCreateCycleResponseInner } from '../models';
// @ts-ignore
import { ProductCreateNewProductRequest } from '../models';
// @ts-ignore
import { ProductCreateNewProductResponse } from '../models';
// @ts-ignore
import { ProductCreatePlanRequest } from '../models';
// @ts-ignore
import { ProductCreatePlanResponse } from '../models';
// @ts-ignore
import { ProductGetDetailsResponse } from '../models';
// @ts-ignore
import { ProductListPlansResponseInner } from '../models';
// @ts-ignore
import { ProductListProductsResponse } from '../models';
// @ts-ignore
import { ProductUpdatePlanAndCycleRequest } from '../models';
// @ts-ignore
import { ProductUpdatePlanAndCycleRequestCycles } from '../models';
// @ts-ignore
import { ProductUpdatePlanOrderRequest } from '../models';
// @ts-ignore
import { ProductUpdateProductRequest } from '../models';
// @ts-ignore
import { ProductUpdateProductRequestOrderedCustomFields } from '../models';
// @ts-ignore
import { ProductUpdateProductRequestProductCountryLimitations } from '../models';
// @ts-ignore
import { ProductUpdateProductResponse } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ProductApi - axios parameter creator
 * @export
 */
export const ProductApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a cycle for a specific plan
         * @summary Create a cycle
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {number} productId The unique identifier of the product in the Billsby platform
         * @param {number} planId The unique identifier of the plan in the Billsby platform
         * @param {ProductCreateCycleRequest} [productCreateCycleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCycle: async (companyDomain: string, productId: number, planId: number, productCreateCycleRequest?: ProductCreateCycleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('createCycle', 'companyDomain', companyDomain)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('createCycle', 'productId', productId)
            // verify required parameter 'planId' is not null or undefined
            assertParamExists('createCycle', 'planId', planId)
            const localVarPath = `/{companyDomain}/products/{productId}/plans/{planId}/cycles`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-productId-`)))
                .replace(`{${"planId"}}`, encodeURIComponent(String(planId !== undefined ? planId : `-planId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: productCreateCycleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/products/{productId}/plans/{planId}/cycles',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(productCreateCycleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new product for your company
         * @summary Create a product
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {ProductCreateNewProductRequest} [productCreateNewProductRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewProduct: async (companyDomain: string, productCreateNewProductRequest?: ProductCreateNewProductRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('createNewProduct', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/products`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: productCreateNewProductRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/products',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(productCreateNewProductRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a new plan for a specific product
         * @summary Create a plan
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {number} productId The unique identifier of the product in the Billsby platform
         * @param {ProductCreatePlanRequest} [productCreatePlanRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlan: async (companyDomain: string, productId: number, productCreatePlanRequest?: ProductCreatePlanRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('createPlan', 'companyDomain', companyDomain)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('createPlan', 'productId', productId)
            const localVarPath = `/{companyDomain}/products/{productId}/plans`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-productId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: productCreatePlanRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/products/{productId}/plans',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(productCreatePlanRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the details of a specific product
         * @summary Product details
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {number} productId The unique identifier of the product in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (companyDomain: string, productId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getDetails', 'companyDomain', companyDomain)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('getDetails', 'productId', productId)
            const localVarPath = `/{companyDomain}/products/{productId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-productId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/products/{productId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of plans associated with a specific product
         * @summary List plans
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {number} productId The unique identifier of the product in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlans: async (companyDomain: string, productId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listPlans', 'companyDomain', companyDomain)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('listPlans', 'productId', productId)
            const localVarPath = `/{companyDomain}/products/{productId}/plans`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-productId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/products/{productId}/plans',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List products
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {number} page The number of the page you would like to return
         * @param {number} pageSize The number of entries per page you would like to return
         * @param {string} [search] Filter products by name (this can be a partial name)
         * @param {number} [visibilityType] The type of visibility of each product; public, hidden and on-sale. Available values: 0, 1, 2, 3 (Public&#x3D;0, Hidden&#x3D;1, Internal&#x3D;2, OffSale&#x3D;3)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts: async (companyDomain: string, page: number, pageSize: number, search?: string, visibilityType?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listProducts', 'companyDomain', companyDomain)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('listProducts', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('listProducts', 'pageSize', pageSize)
            const localVarPath = `/{companyDomain}/products`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (visibilityType !== undefined) {
                localVarQueryParameter['visibilityType'] = visibilityType;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/products',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a plan and cycle for your company
         * @summary Update a plan and cycle
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {number} productId The unique identifier of the product in the Billsby platform
         * @param {number} planId The unique identifier of the plan in the Billsby platform
         * @param {ProductUpdatePlanAndCycleRequest} [productUpdatePlanAndCycleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlanAndCycle: async (companyDomain: string, productId: number, planId: number, productUpdatePlanAndCycleRequest?: ProductUpdatePlanAndCycleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updatePlanAndCycle', 'companyDomain', companyDomain)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('updatePlanAndCycle', 'productId', productId)
            // verify required parameter 'planId' is not null or undefined
            assertParamExists('updatePlanAndCycle', 'planId', planId)
            const localVarPath = `/{companyDomain}/products/{productId}/plans/{planId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-productId-`)))
                .replace(`{${"planId"}}`, encodeURIComponent(String(planId !== undefined ? planId : `-planId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: productUpdatePlanAndCycleRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/products/{productId}/plans/{planId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(productUpdatePlanAndCycleRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change the order in which your plans displayed
         * @summary Update plan order
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} productId The unique identifier of the product in the Billsby platform
         * @param {ProductUpdatePlanOrderRequest} [productUpdatePlanOrderRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlanOrder: async (companyDomain: string, productId: string, productUpdatePlanOrderRequest?: ProductUpdatePlanOrderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updatePlanOrder', 'companyDomain', companyDomain)
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('updatePlanOrder', 'productId', productId)
            const localVarPath = `/{companyDomain}/products/{productId}/plans/orders`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId !== undefined ? productId : `-productId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: productUpdatePlanOrderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/products/{productId}/plans/orders',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(productUpdatePlanOrderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update product for your company
         * @summary Update a product
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {number} productID The unique identifier of the product in the Billsby platform
         * @param {ProductUpdateProductRequest} [productUpdateProductRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct: async (companyDomain: string, productID: number, productUpdateProductRequest?: ProductUpdateProductRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateProduct', 'companyDomain', companyDomain)
            // verify required parameter 'productID' is not null or undefined
            assertParamExists('updateProduct', 'productID', productID)
            const localVarPath = `/{companyDomain}/products/{productId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"productID"}}`, encodeURIComponent(String(productID !== undefined ? productID : `-productID-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: productUpdateProductRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/products/{productId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(productUpdateProductRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProductApi - functional programming interface
 * @export
 */
export const ProductApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProductApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a cycle for a specific plan
         * @summary Create a cycle
         * @param {ProductApiCreateCycleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createCycle(requestParameters: ProductApiCreateCycleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductCreateCycleResponseInner>>> {
            const productCreateCycleRequest: ProductCreateCycleRequest = {
                cyclesInputModel: requestParameters.cyclesInputModel,
                addonPlanInputModels: requestParameters.addonPlanInputModels,
                allowancePlanInputModel: requestParameters.allowancePlanInputModel
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createCycle(requestParameters.companyDomain, requestParameters.productId, requestParameters.planId, productCreateCycleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new product for your company
         * @summary Create a product
         * @param {ProductApiCreateNewProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewProduct(requestParameters: ProductApiCreateNewProductRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCreateNewProductResponse>> {
            const productCreateNewProductRequest: ProductCreateNewProductRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                visibility: requestParameters.visibility,
                billingCurrency: requestParameters.billingCurrency,
                displayName: requestParameters.displayName,
                isShippingAddressRequired: requestParameters.isShippingAddressRequired,
                isShippingAddressValidationRequired: requestParameters.isShippingAddressValidationRequired,
                isBillingAddressValidationRequired: requestParameters.isBillingAddressValidationRequired,
                isAdditionalEmailRequired: requestParameters.isAdditionalEmailRequired,
                isPhoneNumberRequired: requestParameters.isPhoneNumberRequired,
                is MarketingConsentRequired: requestParameters.is MarketingConsentRequired,
                alertEmail: requestParameters.alertEmail,
                orderedCustomFields: requestParameters.orderedCustomFields,
                typeOfProduct: requestParameters.typeOfProduct,
                productCountryLimitation: requestParameters.productCountryLimitation,
                isAnyCountryAllowed: requestParameters.isAnyCountryAllowed
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewProduct(requestParameters.companyDomain, productCreateNewProductRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Create a new plan for a specific product
         * @summary Create a plan
         * @param {ProductApiCreatePlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPlan(requestParameters: ProductApiCreatePlanRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductCreatePlanResponse>> {
            const productCreatePlanRequest: ProductCreatePlanRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                displayName: requestParameters.displayName,
                pricingModel: requestParameters.pricingModel,
                featureTags: requestParameters.featureTags,
                visibility: requestParameters.visibility,
                redirectUrl: requestParameters.redirectUrl,
                alertEmail: requestParameters.alertEmail
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPlan(requestParameters.companyDomain, requestParameters.productId, productCreatePlanRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the details of a specific product
         * @summary Product details
         * @param {ProductApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: ProductApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductGetDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.companyDomain, requestParameters.productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of plans associated with a specific product
         * @summary List plans
         * @param {ProductApiListPlansRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPlans(requestParameters: ProductApiListPlansRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ProductListPlansResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPlans(requestParameters.companyDomain, requestParameters.productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List products
         * @param {ProductApiListProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listProducts(requestParameters: ProductApiListProductsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductListProductsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listProducts(requestParameters.companyDomain, requestParameters.page, requestParameters.pageSize, requestParameters.search, requestParameters.visibilityType, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update a plan and cycle for your company
         * @summary Update a plan and cycle
         * @param {ProductApiUpdatePlanAndCycleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePlanAndCycle(requestParameters: ProductApiUpdatePlanAndCycleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const productUpdatePlanAndCycleRequest: ProductUpdatePlanAndCycleRequest = {
                description: requestParameters.description,
                name: requestParameters.name,
                displayName: requestParameters.displayName,
                featureTags: requestParameters.featureTags,
                visibility: requestParameters.visibility,
                cycles: requestParameters.cycles,
                redirectUrl: requestParameters.redirectUrl,
                alertEmail: requestParameters.alertEmail
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePlanAndCycle(requestParameters.companyDomain, requestParameters.productId, requestParameters.planId, productUpdatePlanAndCycleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Change the order in which your plans displayed
         * @summary Update plan order
         * @param {ProductApiUpdatePlanOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePlanOrder(requestParameters: ProductApiUpdatePlanOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const productUpdatePlanOrderRequest: ProductUpdatePlanOrderRequest = {
                orderedPlanIds: requestParameters.orderedPlanIds
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePlanOrder(requestParameters.companyDomain, requestParameters.productId, productUpdatePlanOrderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update product for your company
         * @summary Update a product
         * @param {ProductApiUpdateProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProduct(requestParameters: ProductApiUpdateProductRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProductUpdateProductResponse>> {
            const productUpdateProductRequest: ProductUpdateProductRequest = {
                name: requestParameters.name,
                visibility: requestParameters.visibility,
                billingCurrency: requestParameters.billingCurrency,
                displayName: requestParameters.displayName,
                decription: requestParameters.decription,
                isShippingAddressRequired: requestParameters.isShippingAddressRequired,
                isShippingAddressValidationRequired: requestParameters.isShippingAddressValidationRequired,
                isBillingAddressValidationRequired: requestParameters.isBillingAddressValidationRequired,
                isAdditionalEmailRequired: requestParameters.isAdditionalEmailRequired,
                isPhoneNumberRequired: requestParameters.isPhoneNumberRequired,
                is MarketingConsentRequired: requestParameters.is MarketingConsentRequired,
                alertEmail: requestParameters.alertEmail,
                orderedCustomFields: requestParameters.orderedCustomFields,
                typeOfProduct: requestParameters.typeOfProduct,
                productCountryLimitations: requestParameters.productCountryLimitations
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProduct(requestParameters.companyDomain, requestParameters.productID, productUpdateProductRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProductApi - factory interface
 * @export
 */
export const ProductApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProductApiFp(configuration)
    return {
        /**
         * Create a cycle for a specific plan
         * @summary Create a cycle
         * @param {ProductApiCreateCycleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createCycle(requestParameters: ProductApiCreateCycleRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ProductCreateCycleResponseInner>> {
            return localVarFp.createCycle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new product for your company
         * @summary Create a product
         * @param {ProductApiCreateNewProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewProduct(requestParameters: ProductApiCreateNewProductRequest, options?: AxiosRequestConfig): AxiosPromise<ProductCreateNewProductResponse> {
            return localVarFp.createNewProduct(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Create a new plan for a specific product
         * @summary Create a plan
         * @param {ProductApiCreatePlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPlan(requestParameters: ProductApiCreatePlanRequest, options?: AxiosRequestConfig): AxiosPromise<ProductCreatePlanResponse> {
            return localVarFp.createPlan(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the details of a specific product
         * @summary Product details
         * @param {ProductApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: ProductApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<ProductGetDetailsResponse> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of plans associated with a specific product
         * @summary List plans
         * @param {ProductApiListPlansRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPlans(requestParameters: ProductApiListPlansRequest, options?: AxiosRequestConfig): AxiosPromise<Array<ProductListPlansResponseInner>> {
            return localVarFp.listPlans(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List products
         * @param {ProductApiListProductsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listProducts(requestParameters: ProductApiListProductsRequest, options?: AxiosRequestConfig): AxiosPromise<ProductListProductsResponse> {
            return localVarFp.listProducts(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a plan and cycle for your company
         * @summary Update a plan and cycle
         * @param {ProductApiUpdatePlanAndCycleRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlanAndCycle(requestParameters: ProductApiUpdatePlanAndCycleRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updatePlanAndCycle(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Change the order in which your plans displayed
         * @summary Update plan order
         * @param {ProductApiUpdatePlanOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlanOrder(requestParameters: ProductApiUpdatePlanOrderRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updatePlanOrder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update product for your company
         * @summary Update a product
         * @param {ProductApiUpdateProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProduct(requestParameters: ProductApiUpdateProductRequest, options?: AxiosRequestConfig): AxiosPromise<ProductUpdateProductResponse> {
            return localVarFp.updateProduct(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createCycle operation in ProductApi.
 * @export
 * @interface ProductApiCreateCycleRequest
 */
export type ProductApiCreateCycleRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof ProductApiCreateCycle
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the product in the Billsby platform
    * @type {number}
    * @memberof ProductApiCreateCycle
    */
    readonly productId: number
    
    /**
    * The unique identifier of the plan in the Billsby platform
    * @type {number}
    * @memberof ProductApiCreateCycle
    */
    readonly planId: number
    
} & ProductCreateCycleRequest

/**
 * Request parameters for createNewProduct operation in ProductApi.
 * @export
 * @interface ProductApiCreateNewProductRequest
 */
export type ProductApiCreateNewProductRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof ProductApiCreateNewProduct
    */
    readonly companyDomain: string
    
} & ProductCreateNewProductRequest

/**
 * Request parameters for createPlan operation in ProductApi.
 * @export
 * @interface ProductApiCreatePlanRequest
 */
export type ProductApiCreatePlanRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof ProductApiCreatePlan
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the product in the Billsby platform
    * @type {number}
    * @memberof ProductApiCreatePlan
    */
    readonly productId: number
    
} & ProductCreatePlanRequest

/**
 * Request parameters for getDetails operation in ProductApi.
 * @export
 * @interface ProductApiGetDetailsRequest
 */
export type ProductApiGetDetailsRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof ProductApiGetDetails
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the product in the Billsby platform
    * @type {number}
    * @memberof ProductApiGetDetails
    */
    readonly productId: number
    
}

/**
 * Request parameters for listPlans operation in ProductApi.
 * @export
 * @interface ProductApiListPlansRequest
 */
export type ProductApiListPlansRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof ProductApiListPlans
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the product in the Billsby platform
    * @type {number}
    * @memberof ProductApiListPlans
    */
    readonly productId: number
    
}

/**
 * Request parameters for listProducts operation in ProductApi.
 * @export
 * @interface ProductApiListProductsRequest
 */
export type ProductApiListProductsRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof ProductApiListProducts
    */
    readonly companyDomain: string
    
    /**
    * The number of the page you would like to return
    * @type {number}
    * @memberof ProductApiListProducts
    */
    readonly page: number
    
    /**
    * The number of entries per page you would like to return
    * @type {number}
    * @memberof ProductApiListProducts
    */
    readonly pageSize: number
    
    /**
    * Filter products by name (this can be a partial name)
    * @type {string}
    * @memberof ProductApiListProducts
    */
    readonly search?: string
    
    /**
    * The type of visibility of each product; public, hidden and on-sale. Available values: 0, 1, 2, 3 (Public=0, Hidden=1, Internal=2, OffSale=3)
    * @type {number}
    * @memberof ProductApiListProducts
    */
    readonly visibilityType?: number
    
}

/**
 * Request parameters for updatePlanAndCycle operation in ProductApi.
 * @export
 * @interface ProductApiUpdatePlanAndCycleRequest
 */
export type ProductApiUpdatePlanAndCycleRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof ProductApiUpdatePlanAndCycle
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the product in the Billsby platform
    * @type {number}
    * @memberof ProductApiUpdatePlanAndCycle
    */
    readonly productId: number
    
    /**
    * The unique identifier of the plan in the Billsby platform
    * @type {number}
    * @memberof ProductApiUpdatePlanAndCycle
    */
    readonly planId: number
    
} & ProductUpdatePlanAndCycleRequest

/**
 * Request parameters for updatePlanOrder operation in ProductApi.
 * @export
 * @interface ProductApiUpdatePlanOrderRequest
 */
export type ProductApiUpdatePlanOrderRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof ProductApiUpdatePlanOrder
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the product in the Billsby platform
    * @type {string}
    * @memberof ProductApiUpdatePlanOrder
    */
    readonly productId: string
    
} & ProductUpdatePlanOrderRequest

/**
 * Request parameters for updateProduct operation in ProductApi.
 * @export
 * @interface ProductApiUpdateProductRequest
 */
export type ProductApiUpdateProductRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof ProductApiUpdateProduct
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the product in the Billsby platform
    * @type {number}
    * @memberof ProductApiUpdateProduct
    */
    readonly productID: number
    
} & ProductUpdateProductRequest

/**
 * ProductApiGenerated - object-oriented interface
 * @export
 * @class ProductApiGenerated
 * @extends {BaseAPI}
 */
export class ProductApiGenerated extends BaseAPI {
    /**
     * Create a cycle for a specific plan
     * @summary Create a cycle
     * @param {ProductApiCreateCycleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiGenerated
     */
    public createCycle(requestParameters: ProductApiCreateCycleRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).createCycle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new product for your company
     * @summary Create a product
     * @param {ProductApiCreateNewProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiGenerated
     */
    public createNewProduct(requestParameters: ProductApiCreateNewProductRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).createNewProduct(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Create a new plan for a specific product
     * @summary Create a plan
     * @param {ProductApiCreatePlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiGenerated
     */
    public createPlan(requestParameters: ProductApiCreatePlanRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).createPlan(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the details of a specific product
     * @summary Product details
     * @param {ProductApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiGenerated
     */
    public getDetails(requestParameters: ProductApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of plans associated with a specific product
     * @summary List plans
     * @param {ProductApiListPlansRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiGenerated
     */
    public listPlans(requestParameters: ProductApiListPlansRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).listPlans(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List products
     * @param {ProductApiListProductsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiGenerated
     */
    public listProducts(requestParameters: ProductApiListProductsRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).listProducts(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update a plan and cycle for your company
     * @summary Update a plan and cycle
     * @param {ProductApiUpdatePlanAndCycleRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiGenerated
     */
    public updatePlanAndCycle(requestParameters: ProductApiUpdatePlanAndCycleRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).updatePlanAndCycle(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change the order in which your plans displayed
     * @summary Update plan order
     * @param {ProductApiUpdatePlanOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiGenerated
     */
    public updatePlanOrder(requestParameters: ProductApiUpdatePlanOrderRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).updatePlanOrder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update product for your company
     * @summary Update a product
     * @param {ProductApiUpdateProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProductApiGenerated
     */
    public updateProduct(requestParameters: ProductApiUpdateProductRequest, options?: AxiosRequestConfig) {
        return ProductApiFp(this.configuration).updateProduct(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
