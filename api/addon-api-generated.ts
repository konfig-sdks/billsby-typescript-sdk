/* tslint:disable */
/* eslint-disable */
/*
Billsby API

Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.

Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.    

Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.

If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build. 

Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..

The version of the OpenAPI document: 1.3.5


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AddonGetDetailsResponse } from '../models';
// @ts-ignore
import { AddonListAvailableAddonsResponseInner } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AddonApi - axios parameter creator
 * @export
 */
export const AddonApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get add-ons for specific subscription
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} subscriptionUniqueId The unique identifier of the subscription in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddonList: async (companyDomain: string, subscriptionUniqueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getAddonList', 'companyDomain', companyDomain)
            // verify required parameter 'subscriptionUniqueId' is not null or undefined
            assertParamExists('getAddonList', 'subscriptionUniqueId', subscriptionUniqueId)
            const localVarPath = `/{companyDomain}/subscriptions/{subscriptionUniqueId}/addons`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"subscriptionUniqueId"}}`, encodeURIComponent(String(subscriptionUniqueId !== undefined ? subscriptionUniqueId : `-subscriptionUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/subscriptions/{subscriptionUniqueId}/addons',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get add-on details
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {number} addonId The unique identifier of the add-on in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (companyDomain: string, addonId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getDetails', 'companyDomain', companyDomain)
            // verify required parameter 'addonId' is not null or undefined
            assertParamExists('getDetails', 'addonId', addonId)
            const localVarPath = `/{companyDomain}/addons/{addonId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"addonId"}}`, encodeURIComponent(String(addonId !== undefined ? addonId : `-addonId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/addons/{addonId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a list of available add-ons
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableAddons: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listAvailableAddons', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/addons`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/addons',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AddonApi - functional programming interface
 * @export
 */
export const AddonApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AddonApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get add-ons for specific subscription
         * @param {AddonApiGetAddonListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAddonList(requestParameters: AddonApiGetAddonListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAddonList(requestParameters.companyDomain, requestParameters.subscriptionUniqueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get add-on details
         * @param {AddonApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: AddonApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddonGetDetailsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.companyDomain, requestParameters.addonId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get a list of available add-ons
         * @param {AddonApiListAvailableAddonsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAvailableAddons(requestParameters: AddonApiListAvailableAddonsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AddonListAvailableAddonsResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAvailableAddons(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AddonApi - factory interface
 * @export
 */
export const AddonApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AddonApiFp(configuration)
    return {
        /**
         * 
         * @summary Get add-ons for specific subscription
         * @param {AddonApiGetAddonListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAddonList(requestParameters: AddonApiGetAddonListRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getAddonList(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get add-on details
         * @param {AddonApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: AddonApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<AddonGetDetailsResponse> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a list of available add-ons
         * @param {AddonApiListAvailableAddonsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAvailableAddons(requestParameters: AddonApiListAvailableAddonsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<AddonListAvailableAddonsResponseInner>> {
            return localVarFp.listAvailableAddons(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAddonList operation in AddonApi.
 * @export
 * @interface AddonApiGetAddonListRequest
 */
export type AddonApiGetAddonListRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof AddonApiGetAddonList
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the subscription in the Billsby platform
    * @type {string}
    * @memberof AddonApiGetAddonList
    */
    readonly subscriptionUniqueId: string
    
}

/**
 * Request parameters for getDetails operation in AddonApi.
 * @export
 * @interface AddonApiGetDetailsRequest
 */
export type AddonApiGetDetailsRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof AddonApiGetDetails
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the add-on in the Billsby platform
    * @type {number}
    * @memberof AddonApiGetDetails
    */
    readonly addonId: number
    
}

/**
 * Request parameters for listAvailableAddons operation in AddonApi.
 * @export
 * @interface AddonApiListAvailableAddonsRequest
 */
export type AddonApiListAvailableAddonsRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof AddonApiListAvailableAddons
    */
    readonly companyDomain: string
    
}

/**
 * AddonApiGenerated - object-oriented interface
 * @export
 * @class AddonApiGenerated
 * @extends {BaseAPI}
 */
export class AddonApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Get add-ons for specific subscription
     * @param {AddonApiGetAddonListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddonApiGenerated
     */
    public getAddonList(requestParameters: AddonApiGetAddonListRequest, options?: AxiosRequestConfig) {
        return AddonApiFp(this.configuration).getAddonList(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get add-on details
     * @param {AddonApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddonApiGenerated
     */
    public getDetails(requestParameters: AddonApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return AddonApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a list of available add-ons
     * @param {AddonApiListAvailableAddonsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddonApiGenerated
     */
    public listAvailableAddons(requestParameters: AddonApiListAvailableAddonsRequest, options?: AxiosRequestConfig) {
        return AddonApiFp(this.configuration).listAvailableAddons(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
