/* tslint:disable */
/* eslint-disable */
/*
Billsby API

Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.

Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.    

Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.

If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build. 

Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..

The version of the OpenAPI document: 1.3.5


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomFieldCreateNewFieldRequest } from '../models';
// @ts-ignore
import { CustomFieldGetResponseResponseInner } from '../models';
// @ts-ignore
import { CustomFieldListResponseInner } from '../models';
// @ts-ignore
import { CustomFieldUpdateFieldRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CustomFieldApi - axios parameter creator
 * @export
 */
export const CustomFieldApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create custom field
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {CustomFieldCreateNewFieldRequest} [customFieldCreateNewFieldRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewField: async (companyDomain: string, customFieldCreateNewFieldRequest?: CustomFieldCreateNewFieldRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('createNewField', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/customfields`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customFieldCreateNewFieldRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customfields',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customFieldCreateNewFieldRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Custom fields response
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {number} [productId] The unique identifier of the product in the Billsby platform
         * @param {string} [customerUniqueId] The unique identifier of the customer in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResponse: async (companyDomain: string, productId?: number, customerUniqueId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getResponse', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/customfieldResponses`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })
            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (customerUniqueId !== undefined) {
                localVarQueryParameter['customerUniqueId'] = customerUniqueId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customfieldResponses',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Custom fields
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (companyDomain: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('list', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/customfields`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customfields',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update an existing custom field
         * @summary Update custom field
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} customFieldId The unique identifier of the custom field in the Billsby platform
         * @param {CustomFieldUpdateFieldRequest} [customFieldUpdateFieldRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateField: async (companyDomain: string, customFieldId: string, customFieldUpdateFieldRequest?: CustomFieldUpdateFieldRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateField', 'companyDomain', companyDomain)
            // verify required parameter 'customFieldId' is not null or undefined
            assertParamExists('updateField', 'customFieldId', customFieldId)
            const localVarPath = `/{companyDomain}/customfields/{customFieldId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"customFieldId"}}`, encodeURIComponent(String(customFieldId !== undefined ? customFieldId : `-customFieldId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: customFieldUpdateFieldRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/customfields/{customFieldId}',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(customFieldUpdateFieldRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CustomFieldApi - functional programming interface
 * @export
 */
export const CustomFieldApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CustomFieldApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create custom field
         * @param {CustomFieldApiCreateNewFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNewField(requestParameters: CustomFieldApiCreateNewFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const customFieldCreateNewFieldRequest: CustomFieldCreateNewFieldRequest = {
                description: requestParameters.description,
                type: requestParameters.type,
                label: requestParameters.label,
                options: requestParameters.options,
                compulsory: requestParameters.compulsory
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNewField(requestParameters.companyDomain, customFieldCreateNewFieldRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Custom fields response
         * @param {CustomFieldApiGetResponseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResponse(requestParameters: CustomFieldApiGetResponseRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomFieldGetResponseResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResponse(requestParameters.companyDomain, requestParameters.productId, requestParameters.customerUniqueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Custom fields
         * @param {CustomFieldApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: CustomFieldApiListRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomFieldListResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.companyDomain, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update an existing custom field
         * @summary Update custom field
         * @param {CustomFieldApiUpdateFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateField(requestParameters: CustomFieldApiUpdateFieldRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const customFieldUpdateFieldRequest: CustomFieldUpdateFieldRequest = {
                description: requestParameters.description,
                label: requestParameters.label,
                options: requestParameters.options,
                compulsory: requestParameters.compulsory
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateField(requestParameters.companyDomain, requestParameters.customFieldId, customFieldUpdateFieldRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CustomFieldApi - factory interface
 * @export
 */
export const CustomFieldApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CustomFieldApiFp(configuration)
    return {
        /**
         * 
         * @summary Create custom field
         * @param {CustomFieldApiCreateNewFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNewField(requestParameters: CustomFieldApiCreateNewFieldRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.createNewField(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Custom fields response
         * @param {CustomFieldApiGetResponseRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResponse(requestParameters: CustomFieldApiGetResponseRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CustomFieldGetResponseResponseInner>> {
            return localVarFp.getResponse(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Custom fields
         * @param {CustomFieldApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: CustomFieldApiListRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CustomFieldListResponseInner>> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update an existing custom field
         * @summary Update custom field
         * @param {CustomFieldApiUpdateFieldRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateField(requestParameters: CustomFieldApiUpdateFieldRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updateField(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createNewField operation in CustomFieldApi.
 * @export
 * @interface CustomFieldApiCreateNewFieldRequest
 */
export type CustomFieldApiCreateNewFieldRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CustomFieldApiCreateNewField
    */
    readonly companyDomain: string
    
} & CustomFieldCreateNewFieldRequest

/**
 * Request parameters for getResponse operation in CustomFieldApi.
 * @export
 * @interface CustomFieldApiGetResponseRequest
 */
export type CustomFieldApiGetResponseRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CustomFieldApiGetResponse
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the product in the Billsby platform
    * @type {number}
    * @memberof CustomFieldApiGetResponse
    */
    readonly productId?: number
    
    /**
    * The unique identifier of the customer in the Billsby platform
    * @type {string}
    * @memberof CustomFieldApiGetResponse
    */
    readonly customerUniqueId?: string
    
}

/**
 * Request parameters for list operation in CustomFieldApi.
 * @export
 * @interface CustomFieldApiListRequest
 */
export type CustomFieldApiListRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CustomFieldApiList
    */
    readonly companyDomain: string
    
}

/**
 * Request parameters for updateField operation in CustomFieldApi.
 * @export
 * @interface CustomFieldApiUpdateFieldRequest
 */
export type CustomFieldApiUpdateFieldRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof CustomFieldApiUpdateField
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the custom field in the Billsby platform
    * @type {string}
    * @memberof CustomFieldApiUpdateField
    */
    readonly customFieldId: string
    
} & CustomFieldUpdateFieldRequest

/**
 * CustomFieldApiGenerated - object-oriented interface
 * @export
 * @class CustomFieldApiGenerated
 * @extends {BaseAPI}
 */
export class CustomFieldApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create custom field
     * @param {CustomFieldApiCreateNewFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldApiGenerated
     */
    public createNewField(requestParameters: CustomFieldApiCreateNewFieldRequest, options?: AxiosRequestConfig) {
        return CustomFieldApiFp(this.configuration).createNewField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Custom fields response
     * @param {CustomFieldApiGetResponseRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldApiGenerated
     */
    public getResponse(requestParameters: CustomFieldApiGetResponseRequest, options?: AxiosRequestConfig) {
        return CustomFieldApiFp(this.configuration).getResponse(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Custom fields
     * @param {CustomFieldApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldApiGenerated
     */
    public list(requestParameters: CustomFieldApiListRequest, options?: AxiosRequestConfig) {
        return CustomFieldApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update an existing custom field
     * @summary Update custom field
     * @param {CustomFieldApiUpdateFieldRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldApiGenerated
     */
    public updateField(requestParameters: CustomFieldApiUpdateFieldRequest, options?: AxiosRequestConfig) {
        return CustomFieldApiFp(this.configuration).updateField(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
