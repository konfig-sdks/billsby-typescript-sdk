/* tslint:disable */
/* eslint-disable */
/*
Billsby API

Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.

Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.    

Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.

If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build. 

Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..

The version of the OpenAPI document: 1.3.5


NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CustomerAddSubscriptionToExistingCustomerRequestAddOnsInner } from '../models';
// @ts-ignore
import { SubscriptionAddFeatureTagsRequest } from '../models';
// @ts-ignore
import { SubscriptionChangePlanRequest } from '../models';
// @ts-ignore
import { SubscriptionFeatureTagsSplitResponse } from '../models';
// @ts-ignore
import { SubscriptionGetCountersValueResponse } from '../models';
// @ts-ignore
import { SubscriptionGetEventLogsResponse } from '../models';
// @ts-ignore
import { SubscriptionGetShippingAddressResponse } from '../models';
// @ts-ignore
import { SubscriptionListSubscriptionsResponse } from '../models';
// @ts-ignore
import { SubscriptionUpdateCounterRequest } from '../models';
// @ts-ignore
import { SubscriptionUpdateRenewalDateRequest } from '../models';
// @ts-ignore
import { SubscriptionUpdateShippingAddressRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * SubscriptionApi - axios parameter creator
 * @export
 */
export const SubscriptionApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * You can add feature tags to existing subscriptions using the unique subscription IDs
         * @summary Add feature tags
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {SubscriptionAddFeatureTagsRequest} [subscriptionAddFeatureTagsRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureTags: async (companyDomain: string, subscriptionAddFeatureTagsRequest?: SubscriptionAddFeatureTagsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('addFeatureTags', 'companyDomain', companyDomain)
            const localVarPath = `/{companyDomain}/subscriptions/tags`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: subscriptionAddFeatureTagsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/subscriptions/tags',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionAddFeatureTagsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel an individual subscription using the unique identifier of the subscription in the Billsby platform
         * @summary Cancel a subscription
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} subscriptionUniqueId The unique identifier of the subscription in the Billsby platform
         * @param {string} customerUniqueId The unique identifier of the customer in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscription: async (companyDomain: string, subscriptionUniqueId: string, customerUniqueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('cancelSubscription', 'companyDomain', companyDomain)
            // verify required parameter 'subscriptionUniqueId' is not null or undefined
            assertParamExists('cancelSubscription', 'subscriptionUniqueId', subscriptionUniqueId)
            // verify required parameter 'customerUniqueId' is not null or undefined
            assertParamExists('cancelSubscription', 'customerUniqueId', customerUniqueId)
            const localVarPath = `/{companyDomain}/subscriptions/{subscriptionUniqueId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"subscriptionUniqueId"}}`, encodeURIComponent(String(subscriptionUniqueId !== undefined ? subscriptionUniqueId : `-subscriptionUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })
            if (customerUniqueId !== undefined) {
                localVarQueryParameter['customerUniqueId'] = customerUniqueId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/subscriptions/{subscriptionUniqueId}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Change the plan that a subscription sits on
         * @summary Change plan
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} subscriptionUniqueId The unique identifier of the subscription in the Billsby platform
         * @param {SubscriptionChangePlanRequest} [subscriptionChangePlanRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePlan: async (companyDomain: string, subscriptionUniqueId: string, subscriptionChangePlanRequest?: SubscriptionChangePlanRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('changePlan', 'companyDomain', companyDomain)
            // verify required parameter 'subscriptionUniqueId' is not null or undefined
            assertParamExists('changePlan', 'subscriptionUniqueId', subscriptionUniqueId)
            const localVarPath = `/{companyDomain}/subscriptions/{subscriptionUniqueId}/plan`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"subscriptionUniqueId"}}`, encodeURIComponent(String(subscriptionUniqueId !== undefined ? subscriptionUniqueId : `-subscriptionUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: subscriptionChangePlanRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/subscriptions/{subscriptionUniqueId}/plan',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionChangePlanRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of feature tags in a subscription split by plan tags and custom tags
         * @summary Feature tags by plan and custom tags
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} subscriptionUniqueId The unique identifier of the subscription in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featureTagsSplit: async (companyDomain: string, subscriptionUniqueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('featureTagsSplit', 'companyDomain', companyDomain)
            // verify required parameter 'subscriptionUniqueId' is not null or undefined
            assertParamExists('featureTagsSplit', 'subscriptionUniqueId', subscriptionUniqueId)
            const localVarPath = `/{companyDomain}/subscriptions/{subscriptionUniqueId}/tags/split`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"subscriptionUniqueId"}}`, encodeURIComponent(String(subscriptionUniqueId !== undefined ? subscriptionUniqueId : `-subscriptionUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/subscriptions/{subscriptionUniqueId}/tags/split',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Counter value
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} subscriptionUniqueId The unique identifier of the subscription in the Billsby platform
         * @param {string} counterId The unique identifier of the counter in the Billsby platform
         * @param {string | Date} [from] The date you would like the counter value from; format is ISO 8601, e.g. 2020-08-25T18:35:00.000Z
         * @param {string | Date} [to] The date you would like the counter value to; format is ISO 8601, e.g. 2020-08-25T18:35:00.000Z
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountersValue: async (companyDomain: string, subscriptionUniqueId: string, counterId: string, from?: string | Date, to?: string | Date, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getCountersValue', 'companyDomain', companyDomain)
            // verify required parameter 'subscriptionUniqueId' is not null or undefined
            assertParamExists('getCountersValue', 'subscriptionUniqueId', subscriptionUniqueId)
            // verify required parameter 'counterId' is not null or undefined
            assertParamExists('getCountersValue', 'counterId', counterId)
            const localVarPath = `/usage/{companyDomain}/subscriptions/{subscriptionUniqueId}/counters/{counterId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"subscriptionUniqueId"}}`, encodeURIComponent(String(subscriptionUniqueId !== undefined ? subscriptionUniqueId : `-subscriptionUniqueId-`)))
                .replace(`{${"counterId"}}`, encodeURIComponent(String(counterId !== undefined ? counterId : `-counterId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })
            if (from !== undefined) {
                localVarQueryParameter['from'] = (from as any instanceof Date) ?
                    (from as any).toISOString().substr(0,10) :
                    from;
            }

            if (to !== undefined) {
                localVarQueryParameter['to'] = (to as any instanceof Date) ?
                    (to as any).toISOString().substr(0,10) :
                    to;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/usage/{companyDomain}/subscriptions/{subscriptionUniqueId}/counters/{counterId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This query gets individual subscription details using the unique identifier provided in the Billsby platform
         * @summary Subscription details
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} subscriptionUniqueId The unique identifier of the subscription in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails: async (companyDomain: string, subscriptionUniqueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getDetails', 'companyDomain', companyDomain)
            // verify required parameter 'subscriptionUniqueId' is not null or undefined
            assertParamExists('getDetails', 'subscriptionUniqueId', subscriptionUniqueId)
            const localVarPath = `/{companyDomain}/subscriptions/{subscriptionUniqueId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"subscriptionUniqueId"}}`, encodeURIComponent(String(subscriptionUniqueId !== undefined ? subscriptionUniqueId : `-subscriptionUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/subscriptions/{subscriptionUniqueId}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This query returns the event logs of a subscription
         * @summary Event logs
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} subscriptionUniqueId The unique identifier of the subscription in the Billsby platform
         * @param {number} page The page of customers you would like to view
         * @param {number} pageSize The number of records to return per page (max 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventLogs: async (companyDomain: string, subscriptionUniqueId: string, page: number, pageSize: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getEventLogs', 'companyDomain', companyDomain)
            // verify required parameter 'subscriptionUniqueId' is not null or undefined
            assertParamExists('getEventLogs', 'subscriptionUniqueId', subscriptionUniqueId)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getEventLogs', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('getEventLogs', 'pageSize', pageSize)
            const localVarPath = `/{companyDomain}/subscriptions/{subscriptionUniqueId}/logs`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"subscriptionUniqueId"}}`, encodeURIComponent(String(subscriptionUniqueId !== undefined ? subscriptionUniqueId : `-subscriptionUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/subscriptions/{subscriptionUniqueId}/logs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This query gets individual subscription details using the unique identifier provided in the Billsby platform
         * @summary Shipping address
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} subscriptionUniqueId The unique identifier of the subscription in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingAddress: async (companyDomain: string, subscriptionUniqueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('getShippingAddress', 'companyDomain', companyDomain)
            // verify required parameter 'subscriptionUniqueId' is not null or undefined
            assertParamExists('getShippingAddress', 'subscriptionUniqueId', subscriptionUniqueId)
            const localVarPath = `/{companyDomain}/subscriptions/{subscriptionUniqueId}/shippingAddress`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"subscriptionUniqueId"}}`, encodeURIComponent(String(subscriptionUniqueId !== undefined ? subscriptionUniqueId : `-subscriptionUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/subscriptions/{subscriptionUniqueId}/shippingAddress',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This query gets a list of all of the subscriptions in your account with their subscription IDs so that you can later lookup individual subscriptions
         * @summary List subscriptions
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {number} page The page of customers you would like to view
         * @param {number} pageSize The number of records to return per page
         * @param {string} [orderBy] You can order the subscriptions by any of the subscription object properties (e.g. CreatedOn to sort by date of creation)
         * @param {string} [orderByDescending] The ordering direction of the previously set property (e.g. Descending in CreatedOn will sort from newest to oldest, non-descending from oldest to newest)
         * @param {boolean} [isActive] Will show only the subscriptions that are active
         * @param {boolean} [isInFreeTrial] Will show only the subscriptions that are in free trial
         * @param {string} [productName] Will show only the subscriptions that has products whose names matches the value provided here
         * @param {string} [planName] Will show only the subscriptions that has plans whose names matches the value provided here
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptions: async (companyDomain: string, page: number, pageSize: number, orderBy?: string, orderByDescending?: string, isActive?: boolean, isInFreeTrial?: boolean, productName?: string, planName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listSubscriptions', 'companyDomain', companyDomain)
            // verify required parameter 'page' is not null or undefined
            assertParamExists('listSubscriptions', 'page', page)
            // verify required parameter 'pageSize' is not null or undefined
            assertParamExists('listSubscriptions', 'pageSize', pageSize)
            const localVarPath = `/{companyDomain}/subscriptions`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })
            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (orderByDescending !== undefined) {
                localVarQueryParameter['orderByDescending'] = orderByDescending;
            }

            if (isActive !== undefined) {
                localVarQueryParameter['isActive'] = isActive;
            }

            if (isInFreeTrial !== undefined) {
                localVarQueryParameter['isInFreeTrial'] = isInFreeTrial;
            }

            if (productName !== undefined) {
                localVarQueryParameter['productName'] = productName;
            }

            if (planName !== undefined) {
                localVarQueryParameter['planName'] = planName;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/subscriptions',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This query returns a list of feature tags in a subscription
         * @summary Feature tags by Subscription
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} subscriptionUniqueId The unique identifier of the subscription in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagsBySubscription: async (companyDomain: string, subscriptionUniqueId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('listTagsBySubscription', 'companyDomain', companyDomain)
            // verify required parameter 'subscriptionUniqueId' is not null or undefined
            assertParamExists('listTagsBySubscription', 'subscriptionUniqueId', subscriptionUniqueId)
            const localVarPath = `/{companyDomain}/subscriptions/{subscriptionUniqueId}/tags`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"subscriptionUniqueId"}}`, encodeURIComponent(String(subscriptionUniqueId !== undefined ? subscriptionUniqueId : `-subscriptionUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/subscriptions/{subscriptionUniqueId}/tags',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a custom feature tag from a list of subscriptions
         * @summary Delete feature tag
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} tagname The name of the custom feature tag you would like to delete
         * @param {string} [subsId] The unique identifier of the subscription in the Billsby platform
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureTag: async (companyDomain: string, tagname: string, subsId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('removeFeatureTag', 'companyDomain', companyDomain)
            // verify required parameter 'tagname' is not null or undefined
            assertParamExists('removeFeatureTag', 'tagname', tagname)
            const localVarPath = `/{companyDomain}/subscriptions/tags/{tagname}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"tagname"}}`, encodeURIComponent(String(tagname !== undefined ? tagname : `-tagname-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })
            if (subsId !== undefined) {
                localVarQueryParameter['subsId'] = subsId;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/subscriptions/tags/{tagname}',
                httpMethod: 'DELETE'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update counter
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} subscriptionUniqueId The unique identifier of the subscription in the Billsby platform
         * @param {string} counterId The unique identifier of the counter in the Billsby platform
         * @param {SubscriptionUpdateCounterRequest} [subscriptionUpdateCounterRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounter: async (companyDomain: string, subscriptionUniqueId: string, counterId: string, subscriptionUpdateCounterRequest?: SubscriptionUpdateCounterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateCounter', 'companyDomain', companyDomain)
            // verify required parameter 'subscriptionUniqueId' is not null or undefined
            assertParamExists('updateCounter', 'subscriptionUniqueId', subscriptionUniqueId)
            // verify required parameter 'counterId' is not null or undefined
            assertParamExists('updateCounter', 'counterId', counterId)
            const localVarPath = `/operations/{companyDomain}/subscriptions/{subscriptionUniqueId}/counters/{counterId}`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"subscriptionUniqueId"}}`, encodeURIComponent(String(subscriptionUniqueId !== undefined ? subscriptionUniqueId : `-subscriptionUniqueId-`)))
                .replace(`{${"counterId"}}`, encodeURIComponent(String(counterId !== undefined ? counterId : `-counterId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: subscriptionUpdateCounterRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/operations/{companyDomain}/subscriptions/{subscriptionUniqueId}/counters/{counterId}',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionUpdateCounterRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update next renewal date
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} subscriptionUniqueId The unique identifier of the subscription in the Billsby platform
         * @param {SubscriptionUpdateRenewalDateRequest} [subscriptionUpdateRenewalDateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRenewalDate: async (companyDomain: string, subscriptionUniqueId: string, subscriptionUpdateRenewalDateRequest?: SubscriptionUpdateRenewalDateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateRenewalDate', 'companyDomain', companyDomain)
            // verify required parameter 'subscriptionUniqueId' is not null or undefined
            assertParamExists('updateRenewalDate', 'subscriptionUniqueId', subscriptionUniqueId)
            const localVarPath = `/{companyDomain}/subscriptions/{subscriptionUniqueId}/renewaldate`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"subscriptionUniqueId"}}`, encodeURIComponent(String(subscriptionUniqueId !== undefined ? subscriptionUniqueId : `-subscriptionUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: subscriptionUpdateRenewalDateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/subscriptions/{subscriptionUniqueId}/renewaldate',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionUpdateRenewalDateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the shipping address for a subscription
         * @summary Update subscription shipping address
         * @param {string} companyDomain Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
         * @param {string} subscriptionUniqueId The unique identifier of the subscription in the Billsby platform
         * @param {SubscriptionUpdateShippingAddressRequest} [subscriptionUpdateShippingAddressRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShippingAddress: async (companyDomain: string, subscriptionUniqueId: string, subscriptionUpdateShippingAddressRequest?: SubscriptionUpdateShippingAddressRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'companyDomain' is not null or undefined
            assertParamExists('updateShippingAddress', 'companyDomain', companyDomain)
            // verify required parameter 'subscriptionUniqueId' is not null or undefined
            assertParamExists('updateShippingAddress', 'subscriptionUniqueId', subscriptionUniqueId)
            const localVarPath = `/{companyDomain}/subscriptions/{subscriptionUniqueId}/shippingAddress`
                .replace(`{${"companyDomain"}}`, encodeURIComponent(String(companyDomain !== undefined ? companyDomain : `-companyDomain-`)))
                .replace(`{${"subscriptionUniqueId"}}`, encodeURIComponent(String(subscriptionUniqueId !== undefined ? subscriptionUniqueId : `-subscriptionUniqueId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication sec0 required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "ApiKey", keyParamName: "sec0", configuration })

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: subscriptionUpdateShippingAddressRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/{companyDomain}/subscriptions/{subscriptionUniqueId}/shippingAddress',
                httpMethod: 'PUT'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionUpdateShippingAddressRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubscriptionApi - functional programming interface
 * @export
 */
export const SubscriptionApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SubscriptionApiAxiosParamCreator(configuration)
    return {
        /**
         * You can add feature tags to existing subscriptions using the unique subscription IDs
         * @summary Add feature tags
         * @param {SubscriptionApiAddFeatureTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addFeatureTags(requestParameters: SubscriptionApiAddFeatureTagsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const subscriptionAddFeatureTagsRequest: SubscriptionAddFeatureTagsRequest = {
                subscriptionUniqueIds: requestParameters.subscriptionUniqueIds,
                tagNames: requestParameters.tagNames
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.addFeatureTags(requestParameters.companyDomain, subscriptionAddFeatureTagsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Cancel an individual subscription using the unique identifier of the subscription in the Billsby platform
         * @summary Cancel a subscription
         * @param {SubscriptionApiCancelSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cancelSubscription(requestParameters: SubscriptionApiCancelSubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.cancelSubscription(requestParameters.companyDomain, requestParameters.subscriptionUniqueId, requestParameters.customerUniqueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Change the plan that a subscription sits on
         * @summary Change plan
         * @param {SubscriptionApiChangePlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changePlan(requestParameters: SubscriptionApiChangePlanRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const subscriptionChangePlanRequest: SubscriptionChangePlanRequest = {
                planId: requestParameters.planId,
                cycleId: requestParameters.cycleId,
                customerUniqueId: requestParameters.customerUniqueId,
                planChangeType: requestParameters.planChangeType,
                units: requestParameters.units,
                addOns: requestParameters.addOns,
                allowances: requestParameters.allowances,
                issueRefund: requestParameters.issueRefund
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.changePlan(requestParameters.companyDomain, requestParameters.subscriptionUniqueId, subscriptionChangePlanRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of feature tags in a subscription split by plan tags and custom tags
         * @summary Feature tags by plan and custom tags
         * @param {SubscriptionApiFeatureTagsSplitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async featureTagsSplit(requestParameters: SubscriptionApiFeatureTagsSplitRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionFeatureTagsSplitResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.featureTagsSplit(requestParameters.companyDomain, requestParameters.subscriptionUniqueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Counter value
         * @param {SubscriptionApiGetCountersValueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCountersValue(requestParameters: SubscriptionApiGetCountersValueRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionGetCountersValueResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCountersValue(requestParameters.companyDomain, requestParameters.subscriptionUniqueId, requestParameters.counterId, requestParameters.from, requestParameters.to, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This query gets individual subscription details using the unique identifier provided in the Billsby platform
         * @summary Subscription details
         * @param {SubscriptionApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getDetails(requestParameters: SubscriptionApiGetDetailsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getDetails(requestParameters.companyDomain, requestParameters.subscriptionUniqueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This query returns the event logs of a subscription
         * @summary Event logs
         * @param {SubscriptionApiGetEventLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventLogs(requestParameters: SubscriptionApiGetEventLogsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionGetEventLogsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventLogs(requestParameters.companyDomain, requestParameters.subscriptionUniqueId, requestParameters.page, requestParameters.pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This query gets individual subscription details using the unique identifier provided in the Billsby platform
         * @summary Shipping address
         * @param {SubscriptionApiGetShippingAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getShippingAddress(requestParameters: SubscriptionApiGetShippingAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionGetShippingAddressResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getShippingAddress(requestParameters.companyDomain, requestParameters.subscriptionUniqueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This query gets a list of all of the subscriptions in your account with their subscription IDs so that you can later lookup individual subscriptions
         * @summary List subscriptions
         * @param {SubscriptionApiListSubscriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSubscriptions(requestParameters: SubscriptionApiListSubscriptionsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionListSubscriptionsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSubscriptions(requestParameters.companyDomain, requestParameters.page, requestParameters.pageSize, requestParameters.orderBy, requestParameters.orderByDescending, requestParameters.isActive, requestParameters.isInFreeTrial, requestParameters.productName, requestParameters.planName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This query returns a list of feature tags in a subscription
         * @summary Feature tags by Subscription
         * @param {SubscriptionApiListTagsBySubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTagsBySubscription(requestParameters: SubscriptionApiListTagsBySubscriptionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTagsBySubscription(requestParameters.companyDomain, requestParameters.subscriptionUniqueId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Delete a custom feature tag from a list of subscriptions
         * @summary Delete feature tag
         * @param {SubscriptionApiRemoveFeatureTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async removeFeatureTag(requestParameters: SubscriptionApiRemoveFeatureTagRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.removeFeatureTag(requestParameters.companyDomain, requestParameters.tagname, requestParameters.subsId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update counter
         * @param {SubscriptionApiUpdateCounterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCounter(requestParameters: SubscriptionApiUpdateCounterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const subscriptionUpdateCounterRequest: SubscriptionUpdateCounterRequest = {
                operationType: requestParameters.operationType,
                value: requestParameters.value
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCounter(requestParameters.companyDomain, requestParameters.subscriptionUniqueId, requestParameters.counterId, subscriptionUpdateCounterRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update next renewal date
         * @param {SubscriptionApiUpdateRenewalDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRenewalDate(requestParameters: SubscriptionApiUpdateRenewalDateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const subscriptionUpdateRenewalDateRequest: SubscriptionUpdateRenewalDateRequest = {
                pauseSubscription: requestParameters.pauseSubscription,
                newRenewalDate: requestParameters.newRenewalDate
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateRenewalDate(requestParameters.companyDomain, requestParameters.subscriptionUniqueId, subscriptionUpdateRenewalDateRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update the shipping address for a subscription
         * @summary Update subscription shipping address
         * @param {SubscriptionApiUpdateShippingAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateShippingAddress(requestParameters: SubscriptionApiUpdateShippingAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const subscriptionUpdateShippingAddressRequest: SubscriptionUpdateShippingAddressRequest = {
                addressLine1: requestParameters.addressLine1,
                addressLine2: requestParameters.addressLine2,
                state: requestParameters.state,
                city: requestParameters.city,
                country: requestParameters.country,
                postCode: requestParameters.postCode
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateShippingAddress(requestParameters.companyDomain, requestParameters.subscriptionUniqueId, subscriptionUpdateShippingAddressRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SubscriptionApi - factory interface
 * @export
 */
export const SubscriptionApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SubscriptionApiFp(configuration)
    return {
        /**
         * You can add feature tags to existing subscriptions using the unique subscription IDs
         * @summary Add feature tags
         * @param {SubscriptionApiAddFeatureTagsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addFeatureTags(requestParameters: SubscriptionApiAddFeatureTagsRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.addFeatureTags(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel an individual subscription using the unique identifier of the subscription in the Billsby platform
         * @summary Cancel a subscription
         * @param {SubscriptionApiCancelSubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cancelSubscription(requestParameters: SubscriptionApiCancelSubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.cancelSubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Change the plan that a subscription sits on
         * @summary Change plan
         * @param {SubscriptionApiChangePlanRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changePlan(requestParameters: SubscriptionApiChangePlanRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.changePlan(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of feature tags in a subscription split by plan tags and custom tags
         * @summary Feature tags by plan and custom tags
         * @param {SubscriptionApiFeatureTagsSplitRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        featureTagsSplit(requestParameters: SubscriptionApiFeatureTagsSplitRequest, options?: AxiosRequestConfig): AxiosPromise<SubscriptionFeatureTagsSplitResponse> {
            return localVarFp.featureTagsSplit(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Counter value
         * @param {SubscriptionApiGetCountersValueRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCountersValue(requestParameters: SubscriptionApiGetCountersValueRequest, options?: AxiosRequestConfig): AxiosPromise<SubscriptionGetCountersValueResponse> {
            return localVarFp.getCountersValue(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This query gets individual subscription details using the unique identifier provided in the Billsby platform
         * @summary Subscription details
         * @param {SubscriptionApiGetDetailsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDetails(requestParameters: SubscriptionApiGetDetailsRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.getDetails(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This query returns the event logs of a subscription
         * @summary Event logs
         * @param {SubscriptionApiGetEventLogsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventLogs(requestParameters: SubscriptionApiGetEventLogsRequest, options?: AxiosRequestConfig): AxiosPromise<SubscriptionGetEventLogsResponse> {
            return localVarFp.getEventLogs(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This query gets individual subscription details using the unique identifier provided in the Billsby platform
         * @summary Shipping address
         * @param {SubscriptionApiGetShippingAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getShippingAddress(requestParameters: SubscriptionApiGetShippingAddressRequest, options?: AxiosRequestConfig): AxiosPromise<SubscriptionGetShippingAddressResponse> {
            return localVarFp.getShippingAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This query gets a list of all of the subscriptions in your account with their subscription IDs so that you can later lookup individual subscriptions
         * @summary List subscriptions
         * @param {SubscriptionApiListSubscriptionsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSubscriptions(requestParameters: SubscriptionApiListSubscriptionsRequest, options?: AxiosRequestConfig): AxiosPromise<SubscriptionListSubscriptionsResponse> {
            return localVarFp.listSubscriptions(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * This query returns a list of feature tags in a subscription
         * @summary Feature tags by Subscription
         * @param {SubscriptionApiListTagsBySubscriptionRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTagsBySubscription(requestParameters: SubscriptionApiListTagsBySubscriptionRequest, options?: AxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.listTagsBySubscription(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a custom feature tag from a list of subscriptions
         * @summary Delete feature tag
         * @param {SubscriptionApiRemoveFeatureTagRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        removeFeatureTag(requestParameters: SubscriptionApiRemoveFeatureTagRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.removeFeatureTag(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update counter
         * @param {SubscriptionApiUpdateCounterRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCounter(requestParameters: SubscriptionApiUpdateCounterRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updateCounter(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update next renewal date
         * @param {SubscriptionApiUpdateRenewalDateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRenewalDate(requestParameters: SubscriptionApiUpdateRenewalDateRequest, options?: AxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.updateRenewalDate(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the shipping address for a subscription
         * @summary Update subscription shipping address
         * @param {SubscriptionApiUpdateShippingAddressRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateShippingAddress(requestParameters: SubscriptionApiUpdateShippingAddressRequest, options?: AxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.updateShippingAddress(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for addFeatureTags operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiAddFeatureTagsRequest
 */
export type SubscriptionApiAddFeatureTagsRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof SubscriptionApiAddFeatureTags
    */
    readonly companyDomain: string
    
} & SubscriptionAddFeatureTagsRequest

/**
 * Request parameters for cancelSubscription operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiCancelSubscriptionRequest
 */
export type SubscriptionApiCancelSubscriptionRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof SubscriptionApiCancelSubscription
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the subscription in the Billsby platform
    * @type {string}
    * @memberof SubscriptionApiCancelSubscription
    */
    readonly subscriptionUniqueId: string
    
    /**
    * The unique identifier of the customer in the Billsby platform
    * @type {string}
    * @memberof SubscriptionApiCancelSubscription
    */
    readonly customerUniqueId: string
    
}

/**
 * Request parameters for changePlan operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiChangePlanRequest
 */
export type SubscriptionApiChangePlanRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof SubscriptionApiChangePlan
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the subscription in the Billsby platform
    * @type {string}
    * @memberof SubscriptionApiChangePlan
    */
    readonly subscriptionUniqueId: string
    
} & SubscriptionChangePlanRequest

/**
 * Request parameters for featureTagsSplit operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiFeatureTagsSplitRequest
 */
export type SubscriptionApiFeatureTagsSplitRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof SubscriptionApiFeatureTagsSplit
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the subscription in the Billsby platform
    * @type {string}
    * @memberof SubscriptionApiFeatureTagsSplit
    */
    readonly subscriptionUniqueId: string
    
}

/**
 * Request parameters for getCountersValue operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiGetCountersValueRequest
 */
export type SubscriptionApiGetCountersValueRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof SubscriptionApiGetCountersValue
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the subscription in the Billsby platform
    * @type {string}
    * @memberof SubscriptionApiGetCountersValue
    */
    readonly subscriptionUniqueId: string
    
    /**
    * The unique identifier of the counter in the Billsby platform
    * @type {string}
    * @memberof SubscriptionApiGetCountersValue
    */
    readonly counterId: string
    
    /**
    * The date you would like the counter value from; format is ISO 8601, e.g. 2020-08-25T18:35:00.000Z
    * @type {string | Date}
    * @memberof SubscriptionApiGetCountersValue
    */
    readonly from?: string | Date
    
    /**
    * The date you would like the counter value to; format is ISO 8601, e.g. 2020-08-25T18:35:00.000Z
    * @type {string | Date}
    * @memberof SubscriptionApiGetCountersValue
    */
    readonly to?: string | Date
    
}

/**
 * Request parameters for getDetails operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiGetDetailsRequest
 */
export type SubscriptionApiGetDetailsRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof SubscriptionApiGetDetails
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the subscription in the Billsby platform
    * @type {string}
    * @memberof SubscriptionApiGetDetails
    */
    readonly subscriptionUniqueId: string
    
}

/**
 * Request parameters for getEventLogs operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiGetEventLogsRequest
 */
export type SubscriptionApiGetEventLogsRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof SubscriptionApiGetEventLogs
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the subscription in the Billsby platform
    * @type {string}
    * @memberof SubscriptionApiGetEventLogs
    */
    readonly subscriptionUniqueId: string
    
    /**
    * The page of customers you would like to view
    * @type {number}
    * @memberof SubscriptionApiGetEventLogs
    */
    readonly page: number
    
    /**
    * The number of records to return per page (max 100)
    * @type {number}
    * @memberof SubscriptionApiGetEventLogs
    */
    readonly pageSize: number
    
}

/**
 * Request parameters for getShippingAddress operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiGetShippingAddressRequest
 */
export type SubscriptionApiGetShippingAddressRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof SubscriptionApiGetShippingAddress
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the subscription in the Billsby platform
    * @type {string}
    * @memberof SubscriptionApiGetShippingAddress
    */
    readonly subscriptionUniqueId: string
    
}

/**
 * Request parameters for listSubscriptions operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiListSubscriptionsRequest
 */
export type SubscriptionApiListSubscriptionsRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof SubscriptionApiListSubscriptions
    */
    readonly companyDomain: string
    
    /**
    * The page of customers you would like to view
    * @type {number}
    * @memberof SubscriptionApiListSubscriptions
    */
    readonly page: number
    
    /**
    * The number of records to return per page
    * @type {number}
    * @memberof SubscriptionApiListSubscriptions
    */
    readonly pageSize: number
    
    /**
    * You can order the subscriptions by any of the subscription object properties (e.g. CreatedOn to sort by date of creation)
    * @type {string}
    * @memberof SubscriptionApiListSubscriptions
    */
    readonly orderBy?: string
    
    /**
    * The ordering direction of the previously set property (e.g. Descending in CreatedOn will sort from newest to oldest, non-descending from oldest to newest)
    * @type {string}
    * @memberof SubscriptionApiListSubscriptions
    */
    readonly orderByDescending?: string
    
    /**
    * Will show only the subscriptions that are active
    * @type {boolean}
    * @memberof SubscriptionApiListSubscriptions
    */
    readonly isActive?: boolean
    
    /**
    * Will show only the subscriptions that are in free trial
    * @type {boolean}
    * @memberof SubscriptionApiListSubscriptions
    */
    readonly isInFreeTrial?: boolean
    
    /**
    * Will show only the subscriptions that has products whose names matches the value provided here
    * @type {string}
    * @memberof SubscriptionApiListSubscriptions
    */
    readonly productName?: string
    
    /**
    * Will show only the subscriptions that has plans whose names matches the value provided here
    * @type {string}
    * @memberof SubscriptionApiListSubscriptions
    */
    readonly planName?: string
    
}

/**
 * Request parameters for listTagsBySubscription operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiListTagsBySubscriptionRequest
 */
export type SubscriptionApiListTagsBySubscriptionRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof SubscriptionApiListTagsBySubscription
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the subscription in the Billsby platform
    * @type {string}
    * @memberof SubscriptionApiListTagsBySubscription
    */
    readonly subscriptionUniqueId: string
    
}

/**
 * Request parameters for removeFeatureTag operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiRemoveFeatureTagRequest
 */
export type SubscriptionApiRemoveFeatureTagRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof SubscriptionApiRemoveFeatureTag
    */
    readonly companyDomain: string
    
    /**
    * The name of the custom feature tag you would like to delete
    * @type {string}
    * @memberof SubscriptionApiRemoveFeatureTag
    */
    readonly tagname: string
    
    /**
    * The unique identifier of the subscription in the Billsby platform
    * @type {string}
    * @memberof SubscriptionApiRemoveFeatureTag
    */
    readonly subsId?: string
    
}

/**
 * Request parameters for updateCounter operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiUpdateCounterRequest
 */
export type SubscriptionApiUpdateCounterRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof SubscriptionApiUpdateCounter
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the subscription in the Billsby platform
    * @type {string}
    * @memberof SubscriptionApiUpdateCounter
    */
    readonly subscriptionUniqueId: string
    
    /**
    * The unique identifier of the counter in the Billsby platform
    * @type {string}
    * @memberof SubscriptionApiUpdateCounter
    */
    readonly counterId: string
    
} & SubscriptionUpdateCounterRequest

/**
 * Request parameters for updateRenewalDate operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiUpdateRenewalDateRequest
 */
export type SubscriptionApiUpdateRenewalDateRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof SubscriptionApiUpdateRenewalDate
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the subscription in the Billsby platform
    * @type {string}
    * @memberof SubscriptionApiUpdateRenewalDate
    */
    readonly subscriptionUniqueId: string
    
} & SubscriptionUpdateRenewalDateRequest

/**
 * Request parameters for updateShippingAddress operation in SubscriptionApi.
 * @export
 * @interface SubscriptionApiUpdateShippingAddressRequest
 */
export type SubscriptionApiUpdateShippingAddressRequest = {
    
    /**
    * Your companies Billsby subdomain - for example, if you login at widgets.billsby.com, your companyDomain is widgets
    * @type {string}
    * @memberof SubscriptionApiUpdateShippingAddress
    */
    readonly companyDomain: string
    
    /**
    * The unique identifier of the subscription in the Billsby platform
    * @type {string}
    * @memberof SubscriptionApiUpdateShippingAddress
    */
    readonly subscriptionUniqueId: string
    
} & SubscriptionUpdateShippingAddressRequest

/**
 * SubscriptionApiGenerated - object-oriented interface
 * @export
 * @class SubscriptionApiGenerated
 * @extends {BaseAPI}
 */
export class SubscriptionApiGenerated extends BaseAPI {
    /**
     * You can add feature tags to existing subscriptions using the unique subscription IDs
     * @summary Add feature tags
     * @param {SubscriptionApiAddFeatureTagsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public addFeatureTags(requestParameters: SubscriptionApiAddFeatureTagsRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).addFeatureTags(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Cancel an individual subscription using the unique identifier of the subscription in the Billsby platform
     * @summary Cancel a subscription
     * @param {SubscriptionApiCancelSubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public cancelSubscription(requestParameters: SubscriptionApiCancelSubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).cancelSubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Change the plan that a subscription sits on
     * @summary Change plan
     * @param {SubscriptionApiChangePlanRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public changePlan(requestParameters: SubscriptionApiChangePlanRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).changePlan(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of feature tags in a subscription split by plan tags and custom tags
     * @summary Feature tags by plan and custom tags
     * @param {SubscriptionApiFeatureTagsSplitRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public featureTagsSplit(requestParameters: SubscriptionApiFeatureTagsSplitRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).featureTagsSplit(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Counter value
     * @param {SubscriptionApiGetCountersValueRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public getCountersValue(requestParameters: SubscriptionApiGetCountersValueRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).getCountersValue(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This query gets individual subscription details using the unique identifier provided in the Billsby platform
     * @summary Subscription details
     * @param {SubscriptionApiGetDetailsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public getDetails(requestParameters: SubscriptionApiGetDetailsRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).getDetails(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This query returns the event logs of a subscription
     * @summary Event logs
     * @param {SubscriptionApiGetEventLogsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public getEventLogs(requestParameters: SubscriptionApiGetEventLogsRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).getEventLogs(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This query gets individual subscription details using the unique identifier provided in the Billsby platform
     * @summary Shipping address
     * @param {SubscriptionApiGetShippingAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public getShippingAddress(requestParameters: SubscriptionApiGetShippingAddressRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).getShippingAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This query gets a list of all of the subscriptions in your account with their subscription IDs so that you can later lookup individual subscriptions
     * @summary List subscriptions
     * @param {SubscriptionApiListSubscriptionsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public listSubscriptions(requestParameters: SubscriptionApiListSubscriptionsRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).listSubscriptions(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This query returns a list of feature tags in a subscription
     * @summary Feature tags by Subscription
     * @param {SubscriptionApiListTagsBySubscriptionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public listTagsBySubscription(requestParameters: SubscriptionApiListTagsBySubscriptionRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).listTagsBySubscription(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a custom feature tag from a list of subscriptions
     * @summary Delete feature tag
     * @param {SubscriptionApiRemoveFeatureTagRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public removeFeatureTag(requestParameters: SubscriptionApiRemoveFeatureTagRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).removeFeatureTag(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update counter
     * @param {SubscriptionApiUpdateCounterRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public updateCounter(requestParameters: SubscriptionApiUpdateCounterRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).updateCounter(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update next renewal date
     * @param {SubscriptionApiUpdateRenewalDateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public updateRenewalDate(requestParameters: SubscriptionApiUpdateRenewalDateRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).updateRenewalDate(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the shipping address for a subscription
     * @summary Update subscription shipping address
     * @param {SubscriptionApiUpdateShippingAddressRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApiGenerated
     */
    public updateShippingAddress(requestParameters: SubscriptionApiUpdateShippingAddressRequest, options?: AxiosRequestConfig) {
        return SubscriptionApiFp(this.configuration).updateShippingAddress(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
